// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new tags API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tags API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TagCreate creates a new tag

Create a new tag.
**Access policy**: administrator

*/
func (a *Client) TagCreate(params *TagCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TagCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TagCreate",
		Method:             "POST",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TagCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TagCreateOK), nil

}

/*
TagDelete removes a tag

Remove a tag.
**Access policy**: administrator

*/
func (a *Client) TagDelete(params *TagDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*TagDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TagDelete",
		Method:             "DELETE",
		PathPattern:        "/tags/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TagDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TagDeleteNoContent), nil

}

/*
TagList lists tags

List tags.
**Access policy**: administrator

*/
func (a *Client) TagList(params *TagListParams, authInfo runtime.ClientAuthInfoWriter) (*TagListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTagListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TagList",
		Method:             "GET",
		PathPattern:        "/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TagListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TagListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

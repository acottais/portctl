// Code generated by go-swagger; DO NOT EDIT.

package tags

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// TagCreateReader is a Reader for the TagCreate structure.
type TagCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TagCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTagCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTagCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewTagCreateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewTagCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTagCreateOK creates a TagCreateOK with default headers values
func NewTagCreateOK() *TagCreateOK {
	return &TagCreateOK{}
}

/*TagCreateOK handles this case with default header values.

Success
*/
type TagCreateOK struct {
	Payload *models.Tag
}

func (o *TagCreateOK) Error() string {
	return fmt.Sprintf("[POST /tags][%d] tagCreateOK  %+v", 200, o.Payload)
}

func (o *TagCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tag)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagCreateBadRequest creates a TagCreateBadRequest with default headers values
func NewTagCreateBadRequest() *TagCreateBadRequest {
	return &TagCreateBadRequest{}
}

/*TagCreateBadRequest handles this case with default header values.

Invalid request
*/
type TagCreateBadRequest struct {
	Payload *models.GenericError
}

func (o *TagCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /tags][%d] tagCreateBadRequest  %+v", 400, o.Payload)
}

func (o *TagCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagCreateConflict creates a TagCreateConflict with default headers values
func NewTagCreateConflict() *TagCreateConflict {
	return &TagCreateConflict{}
}

/*TagCreateConflict handles this case with default header values.

Conflict
*/
type TagCreateConflict struct {
	Payload *models.GenericError
}

func (o *TagCreateConflict) Error() string {
	return fmt.Sprintf("[POST /tags][%d] tagCreateConflict  %+v", 409, o.Payload)
}

func (o *TagCreateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTagCreateInternalServerError creates a TagCreateInternalServerError with default headers values
func NewTagCreateInternalServerError() *TagCreateInternalServerError {
	return &TagCreateInternalServerError{}
}

/*TagCreateInternalServerError handles this case with default header values.

Server error
*/
type TagCreateInternalServerError struct {
	Payload *models.GenericError
}

func (o *TagCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tags][%d] tagCreateInternalServerError  %+v", 500, o.Payload)
}

func (o *TagCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

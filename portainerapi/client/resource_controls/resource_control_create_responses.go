// Code generated by go-swagger; DO NOT EDIT.

package resource_controls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// ResourceControlCreateReader is a Reader for the ResourceControlCreate structure.
type ResourceControlCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResourceControlCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewResourceControlCreateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewResourceControlCreateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewResourceControlCreateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewResourceControlCreateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewResourceControlCreateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResourceControlCreateOK creates a ResourceControlCreateOK with default headers values
func NewResourceControlCreateOK() *ResourceControlCreateOK {
	return &ResourceControlCreateOK{}
}

/*ResourceControlCreateOK handles this case with default header values.

Success
*/
type ResourceControlCreateOK struct {
	Payload *models.ResourceControl
}

func (o *ResourceControlCreateOK) Error() string {
	return fmt.Sprintf("[POST /resource_controls][%d] resourceControlCreateOK  %+v", 200, o.Payload)
}

func (o *ResourceControlCreateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceControl)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlCreateBadRequest creates a ResourceControlCreateBadRequest with default headers values
func NewResourceControlCreateBadRequest() *ResourceControlCreateBadRequest {
	return &ResourceControlCreateBadRequest{}
}

/*ResourceControlCreateBadRequest handles this case with default header values.

Invalid request
*/
type ResourceControlCreateBadRequest struct {
	Payload *models.GenericError
}

func (o *ResourceControlCreateBadRequest) Error() string {
	return fmt.Sprintf("[POST /resource_controls][%d] resourceControlCreateBadRequest  %+v", 400, o.Payload)
}

func (o *ResourceControlCreateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlCreateForbidden creates a ResourceControlCreateForbidden with default headers values
func NewResourceControlCreateForbidden() *ResourceControlCreateForbidden {
	return &ResourceControlCreateForbidden{}
}

/*ResourceControlCreateForbidden handles this case with default header values.

Unauthorized
*/
type ResourceControlCreateForbidden struct {
	Payload *models.GenericError
}

func (o *ResourceControlCreateForbidden) Error() string {
	return fmt.Sprintf("[POST /resource_controls][%d] resourceControlCreateForbidden  %+v", 403, o.Payload)
}

func (o *ResourceControlCreateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlCreateConflict creates a ResourceControlCreateConflict with default headers values
func NewResourceControlCreateConflict() *ResourceControlCreateConflict {
	return &ResourceControlCreateConflict{}
}

/*ResourceControlCreateConflict handles this case with default header values.

Resource control already exists
*/
type ResourceControlCreateConflict struct {
	Payload *models.GenericError
}

func (o *ResourceControlCreateConflict) Error() string {
	return fmt.Sprintf("[POST /resource_controls][%d] resourceControlCreateConflict  %+v", 409, o.Payload)
}

func (o *ResourceControlCreateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlCreateInternalServerError creates a ResourceControlCreateInternalServerError with default headers values
func NewResourceControlCreateInternalServerError() *ResourceControlCreateInternalServerError {
	return &ResourceControlCreateInternalServerError{}
}

/*ResourceControlCreateInternalServerError handles this case with default header values.

Server error
*/
type ResourceControlCreateInternalServerError struct {
	Payload *models.GenericError
}

func (o *ResourceControlCreateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /resource_controls][%d] resourceControlCreateInternalServerError  %+v", 500, o.Payload)
}

func (o *ResourceControlCreateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

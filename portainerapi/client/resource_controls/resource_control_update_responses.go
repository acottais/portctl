// Code generated by go-swagger; DO NOT EDIT.

package resource_controls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// ResourceControlUpdateReader is a Reader for the ResourceControlUpdate structure.
type ResourceControlUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResourceControlUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewResourceControlUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewResourceControlUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewResourceControlUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewResourceControlUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewResourceControlUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewResourceControlUpdateOK creates a ResourceControlUpdateOK with default headers values
func NewResourceControlUpdateOK() *ResourceControlUpdateOK {
	return &ResourceControlUpdateOK{}
}

/*ResourceControlUpdateOK handles this case with default header values.

Success
*/
type ResourceControlUpdateOK struct {
	Payload *models.ResourceControl
}

func (o *ResourceControlUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /resource_controls/{id}][%d] resourceControlUpdateOK  %+v", 200, o.Payload)
}

func (o *ResourceControlUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResourceControl)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlUpdateBadRequest creates a ResourceControlUpdateBadRequest with default headers values
func NewResourceControlUpdateBadRequest() *ResourceControlUpdateBadRequest {
	return &ResourceControlUpdateBadRequest{}
}

/*ResourceControlUpdateBadRequest handles this case with default header values.

Invalid request
*/
type ResourceControlUpdateBadRequest struct {
	Payload *models.GenericError
}

func (o *ResourceControlUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /resource_controls/{id}][%d] resourceControlUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ResourceControlUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlUpdateForbidden creates a ResourceControlUpdateForbidden with default headers values
func NewResourceControlUpdateForbidden() *ResourceControlUpdateForbidden {
	return &ResourceControlUpdateForbidden{}
}

/*ResourceControlUpdateForbidden handles this case with default header values.

Unauthorized
*/
type ResourceControlUpdateForbidden struct {
	Payload *models.GenericError
}

func (o *ResourceControlUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /resource_controls/{id}][%d] resourceControlUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ResourceControlUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlUpdateNotFound creates a ResourceControlUpdateNotFound with default headers values
func NewResourceControlUpdateNotFound() *ResourceControlUpdateNotFound {
	return &ResourceControlUpdateNotFound{}
}

/*ResourceControlUpdateNotFound handles this case with default header values.

Resource control not found
*/
type ResourceControlUpdateNotFound struct {
	Payload *models.GenericError
}

func (o *ResourceControlUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /resource_controls/{id}][%d] resourceControlUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ResourceControlUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResourceControlUpdateInternalServerError creates a ResourceControlUpdateInternalServerError with default headers values
func NewResourceControlUpdateInternalServerError() *ResourceControlUpdateInternalServerError {
	return &ResourceControlUpdateInternalServerError{}
}

/*ResourceControlUpdateInternalServerError handles this case with default header values.

Server error
*/
type ResourceControlUpdateInternalServerError struct {
	Payload *models.GenericError
}

func (o *ResourceControlUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /resource_controls/{id}][%d] resourceControlUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ResourceControlUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

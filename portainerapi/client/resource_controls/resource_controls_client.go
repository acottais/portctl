// Code generated by go-swagger; DO NOT EDIT.

package resource_controls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new resource controls API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resource controls API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ResourceControlCreate creates a new resource control

Create a new resource control to restrict access to a Docker resource.
**Access policy**: restricted

*/
func (a *Client) ResourceControlCreate(params *ResourceControlCreateParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceControlCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceControlCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceControlCreate",
		Method:             "POST",
		PathPattern:        "/resource_controls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResourceControlCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceControlCreateOK), nil

}

/*
ResourceControlDelete removes a resource control

Remove a resource control.
**Access policy**: restricted

*/
func (a *Client) ResourceControlDelete(params *ResourceControlDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceControlDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceControlDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceControlDelete",
		Method:             "DELETE",
		PathPattern:        "/resource_controls/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResourceControlDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceControlDeleteNoContent), nil

}

/*
ResourceControlUpdate updates a resource control

Update a resource control.
**Access policy**: restricted

*/
func (a *Client) ResourceControlUpdate(params *ResourceControlUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ResourceControlUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResourceControlUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResourceControlUpdate",
		Method:             "PUT",
		PathPattern:        "/resource_controls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResourceControlUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ResourceControlUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

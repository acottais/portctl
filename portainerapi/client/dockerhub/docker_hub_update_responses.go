// Code generated by go-swagger; DO NOT EDIT.

package dockerhub

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// DockerHubUpdateReader is a Reader for the DockerHubUpdate structure.
type DockerHubUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DockerHubUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDockerHubUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDockerHubUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDockerHubUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDockerHubUpdateOK creates a DockerHubUpdateOK with default headers values
func NewDockerHubUpdateOK() *DockerHubUpdateOK {
	return &DockerHubUpdateOK{}
}

/*DockerHubUpdateOK handles this case with default header values.

Success
*/
type DockerHubUpdateOK struct {
	Payload *models.DockerHub
}

func (o *DockerHubUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /dockerhub][%d] dockerHubUpdateOK  %+v", 200, o.Payload)
}

func (o *DockerHubUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DockerHub)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDockerHubUpdateBadRequest creates a DockerHubUpdateBadRequest with default headers values
func NewDockerHubUpdateBadRequest() *DockerHubUpdateBadRequest {
	return &DockerHubUpdateBadRequest{}
}

/*DockerHubUpdateBadRequest handles this case with default header values.

Invalid request
*/
type DockerHubUpdateBadRequest struct {
	Payload *models.GenericError
}

func (o *DockerHubUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dockerhub][%d] dockerHubUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *DockerHubUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDockerHubUpdateInternalServerError creates a DockerHubUpdateInternalServerError with default headers values
func NewDockerHubUpdateInternalServerError() *DockerHubUpdateInternalServerError {
	return &DockerHubUpdateInternalServerError{}
}

/*DockerHubUpdateInternalServerError handles this case with default header values.

Server error
*/
type DockerHubUpdateInternalServerError struct {
	Payload *models.GenericError
}

func (o *DockerHubUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dockerhub][%d] dockerHubUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *DockerHubUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

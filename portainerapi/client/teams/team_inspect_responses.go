// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// TeamInspectReader is a Reader for the TeamInspect structure.
type TeamInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TeamInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTeamInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewTeamInspectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewTeamInspectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewTeamInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewTeamInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTeamInspectOK creates a TeamInspectOK with default headers values
func NewTeamInspectOK() *TeamInspectOK {
	return &TeamInspectOK{}
}

/*TeamInspectOK handles this case with default header values.

Success
*/
type TeamInspectOK struct {
	Payload *models.Team
}

func (o *TeamInspectOK) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] teamInspectOK  %+v", 200, o.Payload)
}

func (o *TeamInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Team)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTeamInspectBadRequest creates a TeamInspectBadRequest with default headers values
func NewTeamInspectBadRequest() *TeamInspectBadRequest {
	return &TeamInspectBadRequest{}
}

/*TeamInspectBadRequest handles this case with default header values.

Invalid request
*/
type TeamInspectBadRequest struct {
	Payload *models.GenericError
}

func (o *TeamInspectBadRequest) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] teamInspectBadRequest  %+v", 400, o.Payload)
}

func (o *TeamInspectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTeamInspectForbidden creates a TeamInspectForbidden with default headers values
func NewTeamInspectForbidden() *TeamInspectForbidden {
	return &TeamInspectForbidden{}
}

/*TeamInspectForbidden handles this case with default header values.

Unauthorized
*/
type TeamInspectForbidden struct {
	Payload *models.GenericError
}

func (o *TeamInspectForbidden) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] teamInspectForbidden  %+v", 403, o.Payload)
}

func (o *TeamInspectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTeamInspectNotFound creates a TeamInspectNotFound with default headers values
func NewTeamInspectNotFound() *TeamInspectNotFound {
	return &TeamInspectNotFound{}
}

/*TeamInspectNotFound handles this case with default header values.

Team not found
*/
type TeamInspectNotFound struct {
	Payload *models.GenericError
}

func (o *TeamInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] teamInspectNotFound  %+v", 404, o.Payload)
}

func (o *TeamInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTeamInspectInternalServerError creates a TeamInspectInternalServerError with default headers values
func NewTeamInspectInternalServerError() *TeamInspectInternalServerError {
	return &TeamInspectInternalServerError{}
}

/*TeamInspectInternalServerError handles this case with default header values.

Server error
*/
type TeamInspectInternalServerError struct {
	Payload *models.GenericError
}

func (o *TeamInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] teamInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *TeamInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

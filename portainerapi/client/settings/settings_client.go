// Code generated by go-swagger; DO NOT EDIT.

package settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PublicSettingsInspect retrieves portainer public settings

Retrieve public settings. Returns a small set of settings that are not reserved to administrators only.
**Access policy**: public

*/
func (a *Client) PublicSettingsInspect(params *PublicSettingsInspectParams, authInfo runtime.ClientAuthInfoWriter) (*PublicSettingsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicSettingsInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicSettingsInspect",
		Method:             "GET",
		PathPattern:        "/settings/public",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PublicSettingsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicSettingsInspectOK), nil

}

/*
SettingsInspect retrieves portainer settings

Retrieve Portainer settings.
**Access policy**: administrator

*/
func (a *Client) SettingsInspect(params *SettingsInspectParams, authInfo runtime.ClientAuthInfoWriter) (*SettingsInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SettingsInspect",
		Method:             "GET",
		PathPattern:        "/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SettingsInspectOK), nil

}

/*
SettingsLDAPCheck tests l d a p connectivity

Test LDAP connectivity using LDAP details.
**Access policy**: administrator

*/
func (a *Client) SettingsLDAPCheck(params *SettingsLDAPCheckParams, authInfo runtime.ClientAuthInfoWriter) (*SettingsLDAPCheckNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsLDAPCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SettingsLDAPCheck",
		Method:             "PUT",
		PathPattern:        "/settings/authentication/checkLDAP",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsLDAPCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SettingsLDAPCheckNoContent), nil

}

/*
SettingsUpdate updates portainer settings

Update Portainer settings.
**Access policy**: administrator

*/
func (a *Client) SettingsUpdate(params *SettingsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*SettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SettingsUpdate",
		Method:             "PUT",
		PathPattern:        "/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SettingsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SettingsUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

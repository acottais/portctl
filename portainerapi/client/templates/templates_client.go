// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new templates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TemplateCreate creates a new template

Create a new template.
**Access policy**: administrator

*/
func (a *Client) TemplateCreate(params *TemplateCreateParams, authInfo runtime.ClientAuthInfoWriter) (*TemplateCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TemplateCreate",
		Method:             "POST",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplateCreateOK), nil

}

/*
TemplateDelete removes a template

Remove a template.
**Access policy**: administrator

*/
func (a *Client) TemplateDelete(params *TemplateDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*TemplateDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TemplateDelete",
		Method:             "DELETE",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplateDeleteNoContent), nil

}

/*
TemplateInspect inspects a template

Retrieve details about a template.
**Access policy**: administrator

*/
func (a *Client) TemplateInspect(params *TemplateInspectParams, authInfo runtime.ClientAuthInfoWriter) (*TemplateInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TemplateInspect",
		Method:             "GET",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplateInspectOK), nil

}

/*
TemplateList lists available templates

List available templates.
Administrator templates will not be listed for non-administrator users.
**Access policy**: restricted

*/
func (a *Client) TemplateList(params *TemplateListParams, authInfo runtime.ClientAuthInfoWriter) (*TemplateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TemplateList",
		Method:             "GET",
		PathPattern:        "/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplateListOK), nil

}

/*
TemplateUpdate updates a template

Update a template.
**Access policy**: administrator

*/
func (a *Client) TemplateUpdate(params *TemplateUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*TemplateUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TemplateUpdate",
		Method:             "PUT",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TemplateUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewEndpointCreateParams creates a new EndpointCreateParams object
// with the default values initialized.
func NewEndpointCreateParams() *EndpointCreateParams {
	var ()
	return &EndpointCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEndpointCreateParamsWithTimeout creates a new EndpointCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEndpointCreateParamsWithTimeout(timeout time.Duration) *EndpointCreateParams {
	var ()
	return &EndpointCreateParams{

		timeout: timeout,
	}
}

// NewEndpointCreateParamsWithContext creates a new EndpointCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewEndpointCreateParamsWithContext(ctx context.Context) *EndpointCreateParams {
	var ()
	return &EndpointCreateParams{

		Context: ctx,
	}
}

// NewEndpointCreateParamsWithHTTPClient creates a new EndpointCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEndpointCreateParamsWithHTTPClient(client *http.Client) *EndpointCreateParams {
	var ()
	return &EndpointCreateParams{
		HTTPClient: client,
	}
}

/*EndpointCreateParams contains all the parameters to send to the API endpoint
for the endpoint create operation typically these are written to a http.Request
*/
type EndpointCreateParams struct {

	/*AzureApplicationID
	  Azure application ID. Required if endpoint type is set to 3

	*/
	AzureApplicationID *string
	/*AzureAuthenticationKey
	  Azure authentication key. Required if endpoint type is set to 3

	*/
	AzureAuthenticationKey *string
	/*AzureTenantID
	  Azure tenant ID. Required if endpoint type is set to 3

	*/
	AzureTenantID *string
	/*EndpointType
	  Environment type. Value must be one of: 1 (Docker environment), 2 (Agent environment) or 3 (Azure environment)

	*/
	EndpointType int64
	/*GroupID
	  Endpoint group identifier. If not specified will default to 1 (unassigned).

	*/
	GroupID *string
	/*Name
	  Name that will be used to identify this endpoint (example: my-endpoint)

	*/
	Name string
	/*PublicURL
	  URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375)

	*/
	PublicURL *string
	/*TLS
	  Require TLS to connect against this endpoint (example: true)

	*/
	TLS *string
	/*TLSCACertFile
	  TLS CA certificate file

	*/
	TLSCACertFile runtime.NamedReadCloser
	/*TLSCertFile
	  TLS client certificate file

	*/
	TLSCertFile runtime.NamedReadCloser
	/*TLSKeyFile
	  TLS client key file

	*/
	TLSKeyFile runtime.NamedReadCloser
	/*TLSSkipClientVerify
	  Skip client verification when using TLS (example: false)

	*/
	TLSSkipClientVerify *string
	/*TLSSkipVerify
	  Skip server verification when using TLS (example: false)

	*/
	TLSSkipVerify *string
	/*URL
	  URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine)

	*/
	URL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the endpoint create params
func (o *EndpointCreateParams) WithTimeout(timeout time.Duration) *EndpointCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the endpoint create params
func (o *EndpointCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the endpoint create params
func (o *EndpointCreateParams) WithContext(ctx context.Context) *EndpointCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the endpoint create params
func (o *EndpointCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the endpoint create params
func (o *EndpointCreateParams) WithHTTPClient(client *http.Client) *EndpointCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the endpoint create params
func (o *EndpointCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAzureApplicationID adds the azureApplicationID to the endpoint create params
func (o *EndpointCreateParams) WithAzureApplicationID(azureApplicationID *string) *EndpointCreateParams {
	o.SetAzureApplicationID(azureApplicationID)
	return o
}

// SetAzureApplicationID adds the azureApplicationId to the endpoint create params
func (o *EndpointCreateParams) SetAzureApplicationID(azureApplicationID *string) {
	o.AzureApplicationID = azureApplicationID
}

// WithAzureAuthenticationKey adds the azureAuthenticationKey to the endpoint create params
func (o *EndpointCreateParams) WithAzureAuthenticationKey(azureAuthenticationKey *string) *EndpointCreateParams {
	o.SetAzureAuthenticationKey(azureAuthenticationKey)
	return o
}

// SetAzureAuthenticationKey adds the azureAuthenticationKey to the endpoint create params
func (o *EndpointCreateParams) SetAzureAuthenticationKey(azureAuthenticationKey *string) {
	o.AzureAuthenticationKey = azureAuthenticationKey
}

// WithAzureTenantID adds the azureTenantID to the endpoint create params
func (o *EndpointCreateParams) WithAzureTenantID(azureTenantID *string) *EndpointCreateParams {
	o.SetAzureTenantID(azureTenantID)
	return o
}

// SetAzureTenantID adds the azureTenantId to the endpoint create params
func (o *EndpointCreateParams) SetAzureTenantID(azureTenantID *string) {
	o.AzureTenantID = azureTenantID
}

// WithEndpointType adds the endpointType to the endpoint create params
func (o *EndpointCreateParams) WithEndpointType(endpointType int64) *EndpointCreateParams {
	o.SetEndpointType(endpointType)
	return o
}

// SetEndpointType adds the endpointType to the endpoint create params
func (o *EndpointCreateParams) SetEndpointType(endpointType int64) {
	o.EndpointType = endpointType
}

// WithGroupID adds the groupID to the endpoint create params
func (o *EndpointCreateParams) WithGroupID(groupID *string) *EndpointCreateParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the endpoint create params
func (o *EndpointCreateParams) SetGroupID(groupID *string) {
	o.GroupID = groupID
}

// WithName adds the name to the endpoint create params
func (o *EndpointCreateParams) WithName(name string) *EndpointCreateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the endpoint create params
func (o *EndpointCreateParams) SetName(name string) {
	o.Name = name
}

// WithPublicURL adds the publicURL to the endpoint create params
func (o *EndpointCreateParams) WithPublicURL(publicURL *string) *EndpointCreateParams {
	o.SetPublicURL(publicURL)
	return o
}

// SetPublicURL adds the publicUrl to the endpoint create params
func (o *EndpointCreateParams) SetPublicURL(publicURL *string) {
	o.PublicURL = publicURL
}

// WithTLS adds the tls to the endpoint create params
func (o *EndpointCreateParams) WithTLS(tls *string) *EndpointCreateParams {
	o.SetTLS(tls)
	return o
}

// SetTLS adds the tls to the endpoint create params
func (o *EndpointCreateParams) SetTLS(tls *string) {
	o.TLS = tls
}

// WithTLSCACertFile adds the tLSCACertFile to the endpoint create params
func (o *EndpointCreateParams) WithTLSCACertFile(tLSCACertFile runtime.NamedReadCloser) *EndpointCreateParams {
	o.SetTLSCACertFile(tLSCACertFile)
	return o
}

// SetTLSCACertFile adds the tlsCACertFile to the endpoint create params
func (o *EndpointCreateParams) SetTLSCACertFile(tLSCACertFile runtime.NamedReadCloser) {
	o.TLSCACertFile = tLSCACertFile
}

// WithTLSCertFile adds the tLSCertFile to the endpoint create params
func (o *EndpointCreateParams) WithTLSCertFile(tLSCertFile runtime.NamedReadCloser) *EndpointCreateParams {
	o.SetTLSCertFile(tLSCertFile)
	return o
}

// SetTLSCertFile adds the tlsCertFile to the endpoint create params
func (o *EndpointCreateParams) SetTLSCertFile(tLSCertFile runtime.NamedReadCloser) {
	o.TLSCertFile = tLSCertFile
}

// WithTLSKeyFile adds the tLSKeyFile to the endpoint create params
func (o *EndpointCreateParams) WithTLSKeyFile(tLSKeyFile runtime.NamedReadCloser) *EndpointCreateParams {
	o.SetTLSKeyFile(tLSKeyFile)
	return o
}

// SetTLSKeyFile adds the tlsKeyFile to the endpoint create params
func (o *EndpointCreateParams) SetTLSKeyFile(tLSKeyFile runtime.NamedReadCloser) {
	o.TLSKeyFile = tLSKeyFile
}

// WithTLSSkipClientVerify adds the tLSSkipClientVerify to the endpoint create params
func (o *EndpointCreateParams) WithTLSSkipClientVerify(tLSSkipClientVerify *string) *EndpointCreateParams {
	o.SetTLSSkipClientVerify(tLSSkipClientVerify)
	return o
}

// SetTLSSkipClientVerify adds the tlsSkipClientVerify to the endpoint create params
func (o *EndpointCreateParams) SetTLSSkipClientVerify(tLSSkipClientVerify *string) {
	o.TLSSkipClientVerify = tLSSkipClientVerify
}

// WithTLSSkipVerify adds the tLSSkipVerify to the endpoint create params
func (o *EndpointCreateParams) WithTLSSkipVerify(tLSSkipVerify *string) *EndpointCreateParams {
	o.SetTLSSkipVerify(tLSSkipVerify)
	return o
}

// SetTLSSkipVerify adds the tlsSkipVerify to the endpoint create params
func (o *EndpointCreateParams) SetTLSSkipVerify(tLSSkipVerify *string) {
	o.TLSSkipVerify = tLSSkipVerify
}

// WithURL adds the url to the endpoint create params
func (o *EndpointCreateParams) WithURL(url *string) *EndpointCreateParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the endpoint create params
func (o *EndpointCreateParams) SetURL(url *string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *EndpointCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AzureApplicationID != nil {

		// form param AzureApplicationID
		var frAzureApplicationID string
		if o.AzureApplicationID != nil {
			frAzureApplicationID = *o.AzureApplicationID
		}
		fAzureApplicationID := frAzureApplicationID
		if fAzureApplicationID != "" {
			if err := r.SetFormParam("AzureApplicationID", fAzureApplicationID); err != nil {
				return err
			}
		}

	}

	if o.AzureAuthenticationKey != nil {

		// form param AzureAuthenticationKey
		var frAzureAuthenticationKey string
		if o.AzureAuthenticationKey != nil {
			frAzureAuthenticationKey = *o.AzureAuthenticationKey
		}
		fAzureAuthenticationKey := frAzureAuthenticationKey
		if fAzureAuthenticationKey != "" {
			if err := r.SetFormParam("AzureAuthenticationKey", fAzureAuthenticationKey); err != nil {
				return err
			}
		}

	}

	if o.AzureTenantID != nil {

		// form param AzureTenantID
		var frAzureTenantID string
		if o.AzureTenantID != nil {
			frAzureTenantID = *o.AzureTenantID
		}
		fAzureTenantID := frAzureTenantID
		if fAzureTenantID != "" {
			if err := r.SetFormParam("AzureTenantID", fAzureTenantID); err != nil {
				return err
			}
		}

	}

	// form param EndpointType
	frEndpointType := o.EndpointType
	fEndpointType := swag.FormatInt64(frEndpointType)
	if fEndpointType != "" {
		if err := r.SetFormParam("EndpointType", fEndpointType); err != nil {
			return err
		}
	}

	if o.GroupID != nil {

		// form param GroupID
		var frGroupID string
		if o.GroupID != nil {
			frGroupID = *o.GroupID
		}
		fGroupID := frGroupID
		if fGroupID != "" {
			if err := r.SetFormParam("GroupID", fGroupID); err != nil {
				return err
			}
		}

	}

	// form param Name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("Name", fName); err != nil {
			return err
		}
	}

	if o.PublicURL != nil {

		// form param PublicURL
		var frPublicURL string
		if o.PublicURL != nil {
			frPublicURL = *o.PublicURL
		}
		fPublicURL := frPublicURL
		if fPublicURL != "" {
			if err := r.SetFormParam("PublicURL", fPublicURL); err != nil {
				return err
			}
		}

	}

	if o.TLS != nil {

		// form param TLS
		var frTLS string
		if o.TLS != nil {
			frTLS = *o.TLS
		}
		fTLS := frTLS
		if fTLS != "" {
			if err := r.SetFormParam("TLS", fTLS); err != nil {
				return err
			}
		}

	}

	if o.TLSCACertFile != nil {

		if o.TLSCACertFile != nil {

			// form file param TLSCACertFile
			if err := r.SetFileParam("TLSCACertFile", o.TLSCACertFile); err != nil {
				return err
			}

		}

	}

	if o.TLSCertFile != nil {

		if o.TLSCertFile != nil {

			// form file param TLSCertFile
			if err := r.SetFileParam("TLSCertFile", o.TLSCertFile); err != nil {
				return err
			}

		}

	}

	if o.TLSKeyFile != nil {

		if o.TLSKeyFile != nil {

			// form file param TLSKeyFile
			if err := r.SetFileParam("TLSKeyFile", o.TLSKeyFile); err != nil {
				return err
			}

		}

	}

	if o.TLSSkipClientVerify != nil {

		// form param TLSSkipClientVerify
		var frTLSSkipClientVerify string
		if o.TLSSkipClientVerify != nil {
			frTLSSkipClientVerify = *o.TLSSkipClientVerify
		}
		fTLSSkipClientVerify := frTLSSkipClientVerify
		if fTLSSkipClientVerify != "" {
			if err := r.SetFormParam("TLSSkipClientVerify", fTLSSkipClientVerify); err != nil {
				return err
			}
		}

	}

	if o.TLSSkipVerify != nil {

		// form param TLSSkipVerify
		var frTLSSkipVerify string
		if o.TLSSkipVerify != nil {
			frTLSSkipVerify = *o.TLSSkipVerify
		}
		fTLSSkipVerify := frTLSSkipVerify
		if fTLSSkipVerify != "" {
			if err := r.SetFormParam("TLSSkipVerify", fTLSSkipVerify); err != nil {
				return err
			}
		}

	}

	if o.URL != nil {

		// form param URL
		var frURL string
		if o.URL != nil {
			frURL = *o.URL
		}
		fURL := frURL
		if fURL != "" {
			if err := r.SetFormParam("URL", fURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
StackCreate deploys a new stack

Deploy a new stack into a Docker environment specified via the endpoint identifier.
**Access policy**: restricted

*/
func (a *Client) StackCreate(params *StackCreateParams, authInfo runtime.ClientAuthInfoWriter) (*StackCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackCreate",
		Method:             "POST",
		PathPattern:        "/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackCreateOK), nil

}

/*
StackDelete removes a stack

Remove a stack.
**Access policy**: restricted

*/
func (a *Client) StackDelete(params *StackDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*StackDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackDelete",
		Method:             "DELETE",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackDeleteNoContent), nil

}

/*
StackFileInspect retrieves the content of the stack file for the specified stack

Get Stack file content.
**Access policy**: restricted

*/
func (a *Client) StackFileInspect(params *StackFileInspectParams, authInfo runtime.ClientAuthInfoWriter) (*StackFileInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackFileInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackFileInspect",
		Method:             "GET",
		PathPattern:        "/stacks/{id}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackFileInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackFileInspectOK), nil

}

/*
StackInspect inspects a stack

Retrieve details about a stack.
**Access policy**: restricted

*/
func (a *Client) StackInspect(params *StackInspectParams, authInfo runtime.ClientAuthInfoWriter) (*StackInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackInspect",
		Method:             "GET",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackInspectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackInspectOK), nil

}

/*
StackList lists stacks

List all stacks based on the current user authorizations.
Will return all stacks if using an administrator account otherwise it
will only return the list of stacks the user have access to.
**Access policy**: restricted

*/
func (a *Client) StackList(params *StackListParams, authInfo runtime.ClientAuthInfoWriter) (*StackListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackList",
		Method:             "GET",
		PathPattern:        "/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackListOK), nil

}

/*
StackMigrate migrates a stack to another endpoint

Migrate a stack from an endpoint to another endpoint. It will re-create
the stack inside the target endpoint before removing the original stack.
**Access policy**: restricted

*/
func (a *Client) StackMigrate(params *StackMigrateParams, authInfo runtime.ClientAuthInfoWriter) (*StackMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackMigrateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackMigrate",
		Method:             "POST",
		PathPattern:        "/stacks/{id}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackMigrateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackMigrateOK), nil

}

/*
StackUpdate updates a stack

Update a stack.
**Access policy**: restricted

*/
func (a *Client) StackUpdate(params *StackUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*StackUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStackUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StackUpdate",
		Method:             "PUT",
		PathPattern:        "/stacks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StackUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StackUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/portainerapi/models"
)

// NewStackUpdateParams creates a new StackUpdateParams object
// with the default values initialized.
func NewStackUpdateParams() *StackUpdateParams {
	var ()
	return &StackUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStackUpdateParamsWithTimeout creates a new StackUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStackUpdateParamsWithTimeout(timeout time.Duration) *StackUpdateParams {
	var ()
	return &StackUpdateParams{

		timeout: timeout,
	}
}

// NewStackUpdateParamsWithContext creates a new StackUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewStackUpdateParamsWithContext(ctx context.Context) *StackUpdateParams {
	var ()
	return &StackUpdateParams{

		Context: ctx,
	}
}

// NewStackUpdateParamsWithHTTPClient creates a new StackUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStackUpdateParamsWithHTTPClient(client *http.Client) *StackUpdateParams {
	var ()
	return &StackUpdateParams{
		HTTPClient: client,
	}
}

/*StackUpdateParams contains all the parameters to send to the API endpoint
for the stack update operation typically these are written to a http.Request
*/
type StackUpdateParams struct {

	/*Body
	  Stack details

	*/
	Body *models.StackUpdateRequest
	/*EndpointID
	  Stacks created before version 1.18.0 might not have an associated endpoint identifier. Use this optional parameter to set the endpoint identifier used by the stack.

	*/
	EndpointID *int64
	/*ID
	  Stack identifier

	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stack update params
func (o *StackUpdateParams) WithTimeout(timeout time.Duration) *StackUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stack update params
func (o *StackUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stack update params
func (o *StackUpdateParams) WithContext(ctx context.Context) *StackUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stack update params
func (o *StackUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stack update params
func (o *StackUpdateParams) WithHTTPClient(client *http.Client) *StackUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stack update params
func (o *StackUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the stack update params
func (o *StackUpdateParams) WithBody(body *models.StackUpdateRequest) *StackUpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the stack update params
func (o *StackUpdateParams) SetBody(body *models.StackUpdateRequest) {
	o.Body = body
}

// WithEndpointID adds the endpointID to the stack update params
func (o *StackUpdateParams) WithEndpointID(endpointID *int64) *StackUpdateParams {
	o.SetEndpointID(endpointID)
	return o
}

// SetEndpointID adds the endpointId to the stack update params
func (o *StackUpdateParams) SetEndpointID(endpointID *int64) {
	o.EndpointID = endpointID
}

// WithID adds the id to the stack update params
func (o *StackUpdateParams) WithID(id int64) *StackUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stack update params
func (o *StackUpdateParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *StackUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.EndpointID != nil {

		// query param endpointId
		var qrEndpointID int64
		if o.EndpointID != nil {
			qrEndpointID = *o.EndpointID
		}
		qEndpointID := swag.FormatInt64(qrEndpointID)
		if qEndpointID != "" {
			if err := r.SetQueryParam("endpointId", qEndpointID); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Endpoint endpoint
// swagger:model Endpoint
type Endpoint struct {

	// List of team identifiers authorized to connect to this endpoint
	AuthorizedTeams []int64 `json:"AuthorizedTeams"`

	// List of user identifiers authorized to connect to this endpoint
	AuthorizedUsers []int64 `json:"AuthorizedUsers"`

	// azure credentials
	AzureCredentials *AzureCredentials `json:"AzureCredentials,omitempty"`

	// Endpoint group identifier
	GroupID int64 `json:"GroupID,omitempty"`

	// Endpoint identifier
	ID int64 `json:"Id,omitempty"`

	// Endpoint name
	Name string `json:"Name,omitempty"`

	// URL or IP address where exposed containers will be reachable
	PublicURL string `json:"PublicURL,omitempty"`

	// TLS config
	TLSConfig *TLSConfiguration `json:"TLSConfig,omitempty"`

	// Endpoint environment type. 1 for a Docker environment, 2 for an agent on Docker environment or 3 for an Azure environment.
	Type int64 `json:"Type,omitempty"`

	// URL or IP address of the Docker host associated to this endpoint
	URL string `json:"URL,omitempty"`
}

// Validate validates this endpoint
func (m *Endpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Endpoint) validateAzureCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureCredentials) { // not required
		return nil
	}

	if m.AzureCredentials != nil {
		if err := m.AzureCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AzureCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *Endpoint) validateTLSConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TLSConfig) { // not required
		return nil
	}

	if m.TLSConfig != nil {
		if err := m.TLSConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TLSConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Endpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Endpoint) UnmarshalBinary(b []byte) error {
	var res Endpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

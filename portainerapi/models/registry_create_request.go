// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistryCreateRequest registry create request
// swagger:model RegistryCreateRequest
type RegistryCreateRequest struct {

	// Is authentication against this registry enabled
	// Required: true
	Authentication *bool `json:"Authentication"`

	// Name that will be used to identify this registry
	// Required: true
	Name *string `json:"Name"`

	// Password used to authenticate against this registry
	// Required: true
	Password *string `json:"Password"`

	// Registry Type. Valid values are: 1 (Quay.io), 2 (Azure container registry) or 3 (custom registry)
	// Required: true
	Type *int64 `json:"Type"`

	// URL or IP address of the Docker registry
	// Required: true
	URL *string `json:"URL"`

	// Username used to authenticate against this registry
	// Required: true
	Username *string `json:"Username"`
}

// Validate validates this registry create request
func (m *RegistryCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistryCreateRequest) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("Authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

func (m *RegistryCreateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RegistryCreateRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("Password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *RegistryCreateRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RegistryCreateRequest) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("URL", "body", m.URL); err != nil {
		return err
	}

	return nil
}

func (m *RegistryCreateRequest) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("Username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistryCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistryCreateRequest) UnmarshalBinary(b []byte) error {
	var res RegistryCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

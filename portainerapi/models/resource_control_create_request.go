// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceControlCreateRequest resource control create request
// swagger:model ResourceControlCreateRequest
type ResourceControlCreateRequest struct {

	// Permit access to the associated resource to any user
	Public bool `json:"Public,omitempty"`

	// Docker resource identifier on which access control will be applied. In the case of a resource control applied to a stack, use the stack name as identifier
	// Required: true
	ResourceID *string `json:"ResourceID"`

	// List of Docker resources that will inherit this access control
	SubResourceIds []string `json:"SubResourceIDs"`

	// List of team identifiers with access to the associated resource
	Teams []int64 `json:"Teams"`

	// Type of Docker resource. Valid values are: container, volume service, secret, config or stack
	// Required: true
	Type *string `json:"Type"`

	// List of user identifiers with access to the associated resource
	Users []int64 `json:"Users"`
}

// Validate validates this resource control create request
func (m *ResourceControlCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceControlCreateRequest) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("ResourceID", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *ResourceControlCreateRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceControlCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceControlCreateRequest) UnmarshalBinary(b []byte) error {
	var res ResourceControlCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegistryUpdateRequest registry update request
// swagger:model RegistryUpdateRequest
type RegistryUpdateRequest struct {

	// Is authentication against this registry enabled
	Authentication bool `json:"Authentication,omitempty"`

	// Name that will be used to identify this registry
	// Required: true
	Name *string `json:"Name"`

	// Password used to authenticate against this registry
	Password string `json:"Password,omitempty"`

	// URL or IP address of the Docker registry
	// Required: true
	URL *string `json:"URL"`

	// Username used to authenticate against this registry
	Username string `json:"Username,omitempty"`
}

// Validate validates this registry update request
func (m *RegistryUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegistryUpdateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RegistryUpdateRequest) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("URL", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegistryUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegistryUpdateRequest) UnmarshalBinary(b []byte) error {
	var res RegistryUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Stack stack
// swagger:model Stack
type Stack struct {

	// Endpoint identifier. Reference the endpoint that will be used for deployment
	EndpointID int64 `json:"EndpointID,omitempty"`

	// Path to the Stack file
	EntryPoint string `json:"EntryPoint,omitempty"`

	// A list of environment variables used during stack deployment
	Env []*StackEnv `json:"Env"`

	// Stack identifier
	ID int64 `json:"Id,omitempty"`

	// Stack name
	Name string `json:"Name,omitempty"`

	// Path on disk to the repository hosting the Stack file
	ProjectPath string `json:"ProjectPath,omitempty"`

	// Cluster identifier of the Swarm cluster where the stack is deployed
	SwarmID string `json:"SwarmID,omitempty"`

	// Stack type. 1 for a Swarm stack, 2 for a Compose stack
	Type int64 `json:"Type,omitempty"`
}

// Validate validates this stack
func (m *Stack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stack) validateEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for i := 0; i < len(m.Env); i++ {
		if swag.IsZero(m.Env[i]) { // not required
			continue
		}

		if m.Env[i] != nil {
			if err := m.Env[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stack) UnmarshalBinary(b []byte) error {
	var res Stack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

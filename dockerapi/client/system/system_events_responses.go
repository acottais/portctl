// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SystemEventsReader is a Reader for the SystemEvents structure.
type SystemEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSystemEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSystemEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSystemEventsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSystemEventsOK creates a SystemEventsOK with default headers values
func NewSystemEventsOK() *SystemEventsOK {
	return &SystemEventsOK{}
}

/*SystemEventsOK handles this case with default header values.

no error
*/
type SystemEventsOK struct {
	Payload *SystemEventsOKBody
}

func (o *SystemEventsOK) Error() string {
	return fmt.Sprintf("[GET /events][%d] systemEventsOK  %+v", 200, o.Payload)
}

func (o *SystemEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SystemEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemEventsBadRequest creates a SystemEventsBadRequest with default headers values
func NewSystemEventsBadRequest() *SystemEventsBadRequest {
	return &SystemEventsBadRequest{}
}

/*SystemEventsBadRequest handles this case with default header values.

bad parameter
*/
type SystemEventsBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SystemEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /events][%d] systemEventsBadRequest  %+v", 400, o.Payload)
}

func (o *SystemEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemEventsInternalServerError creates a SystemEventsInternalServerError with default headers values
func NewSystemEventsInternalServerError() *SystemEventsInternalServerError {
	return &SystemEventsInternalServerError{}
}

/*SystemEventsInternalServerError handles this case with default header values.

server error
*/
type SystemEventsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SystemEventsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /events][%d] systemEventsInternalServerError  %+v", 500, o.Payload)
}

func (o *SystemEventsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SystemEventsOKBody SystemEventsResponse
swagger:model SystemEventsOKBody
*/
type SystemEventsOKBody struct {

	// The type of event
	Action string `json:"Action,omitempty"`

	// actor
	Actor *SystemEventsOKBodyActor `json:"Actor,omitempty"`

	// The type of object emitting the event
	Type string `json:"Type,omitempty"`

	// Timestamp of event
	Time int64 `json:"time,omitempty"`

	// Timestamp of event, with nanosecond accuracy
	TimeNano int64 `json:"timeNano,omitempty"`
}

// Validate validates this system events o k body
func (o *SystemEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SystemEventsOKBody) validateActor(formats strfmt.Registry) error {

	if swag.IsZero(o.Actor) { // not required
		return nil
	}

	if o.Actor != nil {
		if err := o.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemEventsOK" + "." + "Actor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SystemEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemEventsOKBody) UnmarshalBinary(b []byte) error {
	var res SystemEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SystemEventsOKBodyActor system events o k body actor
swagger:model SystemEventsOKBodyActor
*/
type SystemEventsOKBodyActor struct {

	// Various key/value attributes of the object, depending on its type
	Attributes map[string]string `json:"Attributes,omitempty"`

	// The ID of the object emitting the event
	ID string `json:"ID,omitempty"`
}

// Validate validates this system events o k body actor
func (o *SystemEventsOKBodyActor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SystemEventsOKBodyActor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemEventsOKBodyActor) UnmarshalBinary(b []byte) error {
	var res SystemEventsOKBodyActor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SystemPingHeadReader is a Reader for the SystemPingHead structure.
type SystemPingHeadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemPingHeadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSystemPingHeadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewSystemPingHeadInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSystemPingHeadOK creates a SystemPingHeadOK with default headers values
func NewSystemPingHeadOK() *SystemPingHeadOK {
	return &SystemPingHeadOK{
		CacheControl: "no-cache, no-store, must-revalidate",
		Pragma:       "no-cache",
	}
}

/*SystemPingHeadOK handles this case with default header values.

no error
*/
type SystemPingHeadOK struct {
	/*Max API Version the server supports
	 */
	APIVersion string
	/*Default version of docker image builder
	 */
	BuildKitVersion string

	CacheControl string
	/*If the server is running with experimental mode enabled
	 */
	DockerExperimental bool

	Pragma string

	Payload string
}

func (o *SystemPingHeadOK) Error() string {
	return fmt.Sprintf("[HEAD /_ping][%d] systemPingHeadOK  %+v", 200, o.Payload)
}

func (o *SystemPingHeadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header API-Version
	o.APIVersion = response.GetHeader("API-Version")

	// response header BuildKit-Version
	o.BuildKitVersion = response.GetHeader("BuildKit-Version")

	// response header Cache-Control
	o.CacheControl = response.GetHeader("Cache-Control")

	// response header Docker-Experimental
	dockerExperimental, err := swag.ConvertBool(response.GetHeader("Docker-Experimental"))
	if err != nil {
		return errors.InvalidType("Docker-Experimental", "header", "bool", response.GetHeader("Docker-Experimental"))
	}
	o.DockerExperimental = dockerExperimental

	// response header Pragma
	o.Pragma = response.GetHeader("Pragma")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemPingHeadInternalServerError creates a SystemPingHeadInternalServerError with default headers values
func NewSystemPingHeadInternalServerError() *SystemPingHeadInternalServerError {
	return &SystemPingHeadInternalServerError{}
}

/*SystemPingHeadInternalServerError handles this case with default header values.

server error
*/
type SystemPingHeadInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SystemPingHeadInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /_ping][%d] systemPingHeadInternalServerError  %+v", 500, o.Payload)
}

func (o *SystemPingHeadInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

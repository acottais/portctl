// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SystemAuthReader is a Reader for the SystemAuth structure.
type SystemAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSystemAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewSystemAuthNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewSystemAuthInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSystemAuthOK creates a SystemAuthOK with default headers values
func NewSystemAuthOK() *SystemAuthOK {
	return &SystemAuthOK{}
}

/*SystemAuthOK handles this case with default header values.

An identity token was generated successfully.
*/
type SystemAuthOK struct {
	Payload *SystemAuthOKBody
}

func (o *SystemAuthOK) Error() string {
	return fmt.Sprintf("[POST /auth][%d] systemAuthOK  %+v", 200, o.Payload)
}

func (o *SystemAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SystemAuthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemAuthNoContent creates a SystemAuthNoContent with default headers values
func NewSystemAuthNoContent() *SystemAuthNoContent {
	return &SystemAuthNoContent{}
}

/*SystemAuthNoContent handles this case with default header values.

No error
*/
type SystemAuthNoContent struct {
}

func (o *SystemAuthNoContent) Error() string {
	return fmt.Sprintf("[POST /auth][%d] systemAuthNoContent ", 204)
}

func (o *SystemAuthNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSystemAuthInternalServerError creates a SystemAuthInternalServerError with default headers values
func NewSystemAuthInternalServerError() *SystemAuthInternalServerError {
	return &SystemAuthInternalServerError{}
}

/*SystemAuthInternalServerError handles this case with default header values.

Server error
*/
type SystemAuthInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SystemAuthInternalServerError) Error() string {
	return fmt.Sprintf("[POST /auth][%d] systemAuthInternalServerError  %+v", 500, o.Payload)
}

func (o *SystemAuthInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SystemAuthOKBody SystemAuthResponse
swagger:model SystemAuthOKBody
*/
type SystemAuthOKBody struct {

	// An opaque token used to authenticate a user after a successful login
	IdentityToken string `json:"IdentityToken,omitempty"`

	// The status of the authentication
	// Required: true
	Status string `json:"Status"`
}

// Validate validates this system auth o k body
func (o *SystemAuthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SystemAuthOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("systemAuthOK"+"."+"Status", "body", string(o.Status)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SystemAuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SystemAuthOKBody) UnmarshalBinary(b []byte) error {
	var res SystemAuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ImageDeleteReader is a Reader for the ImageDelete structure.
type ImageDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImageDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewImageDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewImageDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewImageDeleteConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewImageDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewImageDeleteOK creates a ImageDeleteOK with default headers values
func NewImageDeleteOK() *ImageDeleteOK {
	return &ImageDeleteOK{}
}

/*ImageDeleteOK handles this case with default header values.

The image was deleted successfully
*/
type ImageDeleteOK struct {
	Payload []*models.ImageDeleteResponseItem
}

func (o *ImageDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /images/{name}][%d] imageDeleteOK  %+v", 200, o.Payload)
}

func (o *ImageDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageDeleteNotFound creates a ImageDeleteNotFound with default headers values
func NewImageDeleteNotFound() *ImageDeleteNotFound {
	return &ImageDeleteNotFound{}
}

/*ImageDeleteNotFound handles this case with default header values.

No such image
*/
type ImageDeleteNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ImageDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /images/{name}][%d] imageDeleteNotFound  %+v", 404, o.Payload)
}

func (o *ImageDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageDeleteConflict creates a ImageDeleteConflict with default headers values
func NewImageDeleteConflict() *ImageDeleteConflict {
	return &ImageDeleteConflict{}
}

/*ImageDeleteConflict handles this case with default header values.

Conflict
*/
type ImageDeleteConflict struct {
	Payload *models.ErrorResponse
}

func (o *ImageDeleteConflict) Error() string {
	return fmt.Sprintf("[DELETE /images/{name}][%d] imageDeleteConflict  %+v", 409, o.Payload)
}

func (o *ImageDeleteConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageDeleteInternalServerError creates a ImageDeleteInternalServerError with default headers values
func NewImageDeleteInternalServerError() *ImageDeleteInternalServerError {
	return &ImageDeleteInternalServerError{}
}

/*ImageDeleteInternalServerError handles this case with default header values.

Server error
*/
type ImageDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ImageDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /images/{name}][%d] imageDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *ImageDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

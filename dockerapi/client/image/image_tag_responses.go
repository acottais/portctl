// Code generated by go-swagger; DO NOT EDIT.

package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ImageTagReader is a Reader for the ImageTag structure.
type ImageTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImageTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewImageTagCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewImageTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewImageTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewImageTagConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewImageTagInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewImageTagCreated creates a ImageTagCreated with default headers values
func NewImageTagCreated() *ImageTagCreated {
	return &ImageTagCreated{}
}

/*ImageTagCreated handles this case with default header values.

No error
*/
type ImageTagCreated struct {
}

func (o *ImageTagCreated) Error() string {
	return fmt.Sprintf("[POST /images/{name}/tag][%d] imageTagCreated ", 201)
}

func (o *ImageTagCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImageTagBadRequest creates a ImageTagBadRequest with default headers values
func NewImageTagBadRequest() *ImageTagBadRequest {
	return &ImageTagBadRequest{}
}

/*ImageTagBadRequest handles this case with default header values.

Bad parameter
*/
type ImageTagBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *ImageTagBadRequest) Error() string {
	return fmt.Sprintf("[POST /images/{name}/tag][%d] imageTagBadRequest  %+v", 400, o.Payload)
}

func (o *ImageTagBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageTagNotFound creates a ImageTagNotFound with default headers values
func NewImageTagNotFound() *ImageTagNotFound {
	return &ImageTagNotFound{}
}

/*ImageTagNotFound handles this case with default header values.

No such image
*/
type ImageTagNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ImageTagNotFound) Error() string {
	return fmt.Sprintf("[POST /images/{name}/tag][%d] imageTagNotFound  %+v", 404, o.Payload)
}

func (o *ImageTagNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageTagConflict creates a ImageTagConflict with default headers values
func NewImageTagConflict() *ImageTagConflict {
	return &ImageTagConflict{}
}

/*ImageTagConflict handles this case with default header values.

Conflict
*/
type ImageTagConflict struct {
	Payload *models.ErrorResponse
}

func (o *ImageTagConflict) Error() string {
	return fmt.Sprintf("[POST /images/{name}/tag][%d] imageTagConflict  %+v", 409, o.Payload)
}

func (o *ImageTagConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageTagInternalServerError creates a ImageTagInternalServerError with default headers values
func NewImageTagInternalServerError() *ImageTagInternalServerError {
	return &ImageTagInternalServerError{}
}

/*ImageTagInternalServerError handles this case with default header values.

Server error
*/
type ImageTagInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ImageTagInternalServerError) Error() string {
	return fmt.Sprintf("[POST /images/{name}/tag][%d] imageTagInternalServerError  %+v", 500, o.Payload)
}

func (o *ImageTagInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

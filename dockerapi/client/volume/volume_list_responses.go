// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// VolumeListReader is a Reader for the VolumeList structure.
type VolumeListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVolumeListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewVolumeListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVolumeListOK creates a VolumeListOK with default headers values
func NewVolumeListOK() *VolumeListOK {
	return &VolumeListOK{}
}

/*VolumeListOK handles this case with default header values.

Summary volume data that matches the query
*/
type VolumeListOK struct {
	Payload *VolumeListOKBody
}

func (o *VolumeListOK) Error() string {
	return fmt.Sprintf("[GET /volumes][%d] volumeListOK  %+v", 200, o.Payload)
}

func (o *VolumeListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VolumeListOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeListInternalServerError creates a VolumeListInternalServerError with default headers values
func NewVolumeListInternalServerError() *VolumeListInternalServerError {
	return &VolumeListInternalServerError{}
}

/*VolumeListInternalServerError handles this case with default header values.

Server error
*/
type VolumeListInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *VolumeListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /volumes][%d] volumeListInternalServerError  %+v", 500, o.Payload)
}

func (o *VolumeListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*VolumeListOKBody VolumeListResponse
//
// Volume list response
swagger:model VolumeListOKBody
*/
type VolumeListOKBody struct {

	// List of volumes
	// Required: true
	Volumes []*models.Volume `json:"Volumes"`

	// Warnings that occurred when fetching the list of volumes
	// Required: true
	Warnings []string `json:"Warnings"`
}

// Validate validates this volume list o k body
func (o *VolumeListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeListOKBody) validateVolumes(formats strfmt.Registry) error {

	if err := validate.Required("volumeListOK"+"."+"Volumes", "body", o.Volumes); err != nil {
		return err
	}

	for i := 0; i < len(o.Volumes); i++ {
		if swag.IsZero(o.Volumes[i]) { // not required
			continue
		}

		if o.Volumes[i] != nil {
			if err := o.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeListOK" + "." + "Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *VolumeListOKBody) validateWarnings(formats strfmt.Registry) error {

	if err := validate.Required("volumeListOK"+"."+"Warnings", "body", o.Warnings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeListOKBody) UnmarshalBinary(b []byte) error {
	var res VolumeListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

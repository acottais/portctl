// Code generated by go-swagger; DO NOT EDIT.

package volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// VolumePruneReader is a Reader for the VolumePrune structure.
type VolumePruneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumePruneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVolumePruneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewVolumePruneInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVolumePruneOK creates a VolumePruneOK with default headers values
func NewVolumePruneOK() *VolumePruneOK {
	return &VolumePruneOK{}
}

/*VolumePruneOK handles this case with default header values.

No error
*/
type VolumePruneOK struct {
	Payload *VolumePruneOKBody
}

func (o *VolumePruneOK) Error() string {
	return fmt.Sprintf("[POST /volumes/prune][%d] volumePruneOK  %+v", 200, o.Payload)
}

func (o *VolumePruneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(VolumePruneOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumePruneInternalServerError creates a VolumePruneInternalServerError with default headers values
func NewVolumePruneInternalServerError() *VolumePruneInternalServerError {
	return &VolumePruneInternalServerError{}
}

/*VolumePruneInternalServerError handles this case with default header values.

Server error
*/
type VolumePruneInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *VolumePruneInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volumes/prune][%d] volumePruneInternalServerError  %+v", 500, o.Payload)
}

func (o *VolumePruneInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*VolumePruneOKBody VolumePruneResponse
swagger:model VolumePruneOKBody
*/
type VolumePruneOKBody struct {

	// Disk space reclaimed in bytes
	SpaceReclaimed int64 `json:"SpaceReclaimed,omitempty"`

	// Volumes that were deleted
	VolumesDeleted []string `json:"VolumesDeleted"`
}

// Validate validates this volume prune o k body
func (o *VolumePruneOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *VolumePruneOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumePruneOKBody) UnmarshalBinary(b []byte) error {
	var res VolumePruneOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

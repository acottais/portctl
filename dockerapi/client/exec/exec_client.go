// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new exec API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for exec API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ContainerExec creates an exec instance

Run a command inside a running container.
*/
func (a *Client) ContainerExec(params *ContainerExecParams) (*ContainerExecCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContainerExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContainerExec",
		Method:             "POST",
		PathPattern:        "/containers/{id}/exec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ContainerExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ContainerExecCreated), nil

}

/*
ExecInspect inspects an exec instance

Return low-level information about an exec instance.
*/
func (a *Client) ExecInspect(params *ExecInspectParams) (*ExecInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExecInspect",
		Method:             "GET",
		PathPattern:        "/exec/{id}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecInspectOK), nil

}

/*
ExecResize resizes an exec instance

Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance.
*/
func (a *Client) ExecResize(params *ExecResizeParams) (*ExecResizeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecResizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExecResize",
		Method:             "POST",
		PathPattern:        "/exec/{id}/resize",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecResizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecResizeCreated), nil

}

/*
ExecStart starts an exec instance

Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
*/
func (a *Client) ExecStart(params *ExecStartParams) (*ExecStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecStartParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ExecStart",
		Method:             "POST",
		PathPattern:        "/exec/{id}/start",
		ProducesMediaTypes: []string{"application/vnd.docker.raw-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecStartOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

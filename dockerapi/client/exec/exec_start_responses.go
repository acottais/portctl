// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ExecStartReader is a Reader for the ExecStart structure.
type ExecStartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExecStartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewExecStartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewExecStartNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewExecStartConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewExecStartOK creates a ExecStartOK with default headers values
func NewExecStartOK() *ExecStartOK {
	return &ExecStartOK{}
}

/*ExecStartOK handles this case with default header values.

No error
*/
type ExecStartOK struct {
}

func (o *ExecStartOK) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] execStartOK ", 200)
}

func (o *ExecStartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExecStartNotFound creates a ExecStartNotFound with default headers values
func NewExecStartNotFound() *ExecStartNotFound {
	return &ExecStartNotFound{}
}

/*ExecStartNotFound handles this case with default header values.

No such exec instance
*/
type ExecStartNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ExecStartNotFound) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] execStartNotFound  %+v", 404, o.Payload)
}

func (o *ExecStartNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExecStartConflict creates a ExecStartConflict with default headers values
func NewExecStartConflict() *ExecStartConflict {
	return &ExecStartConflict{}
}

/*ExecStartConflict handles this case with default header values.

Container is stopped or paused
*/
type ExecStartConflict struct {
	Payload *models.ErrorResponse
}

func (o *ExecStartConflict) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] execStartConflict  %+v", 409, o.Payload)
}

func (o *ExecStartConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExecStartBody exec start body
swagger:model ExecStartBody
*/
type ExecStartBody struct {

	// Detach from the command.
	Detach bool `json:"Detach,omitempty"`

	// Allocate a pseudo-TTY.
	Tty bool `json:"Tty,omitempty"`
}

// Validate validates this exec start body
func (o *ExecStartBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExecStartBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExecStartBody) UnmarshalBinary(b []byte) error {
	var res ExecStartBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

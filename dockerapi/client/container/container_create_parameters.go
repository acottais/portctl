// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerCreateParams creates a new ContainerCreateParams object
// with the default values initialized.
func NewContainerCreateParams() *ContainerCreateParams {
	var ()
	return &ContainerCreateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContainerCreateParamsWithTimeout creates a new ContainerCreateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContainerCreateParamsWithTimeout(timeout time.Duration) *ContainerCreateParams {
	var ()
	return &ContainerCreateParams{

		timeout: timeout,
	}
}

// NewContainerCreateParamsWithContext creates a new ContainerCreateParams object
// with the default values initialized, and the ability to set a context for a request
func NewContainerCreateParamsWithContext(ctx context.Context) *ContainerCreateParams {
	var ()
	return &ContainerCreateParams{

		Context: ctx,
	}
}

// NewContainerCreateParamsWithHTTPClient creates a new ContainerCreateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContainerCreateParamsWithHTTPClient(client *http.Client) *ContainerCreateParams {
	var ()
	return &ContainerCreateParams{
		HTTPClient: client,
	}
}

/*ContainerCreateParams contains all the parameters to send to the API endpoint
for the container create operation typically these are written to a http.Request
*/
type ContainerCreateParams struct {

	/*Body
	  Container to create

	*/
	Body ContainerCreateBody
	/*Name
	  Assign the specified name to the container. Must match `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.

	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the container create params
func (o *ContainerCreateParams) WithTimeout(timeout time.Duration) *ContainerCreateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container create params
func (o *ContainerCreateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container create params
func (o *ContainerCreateParams) WithContext(ctx context.Context) *ContainerCreateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container create params
func (o *ContainerCreateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container create params
func (o *ContainerCreateParams) WithHTTPClient(client *http.Client) *ContainerCreateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container create params
func (o *ContainerCreateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the container create params
func (o *ContainerCreateParams) WithBody(body ContainerCreateBody) *ContainerCreateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the container create params
func (o *ContainerCreateParams) SetBody(body ContainerCreateBody) {
	o.Body = body
}

// WithName adds the name to the container create params
func (o *ContainerCreateParams) WithName(name *string) *ContainerCreateParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the container create params
func (o *ContainerCreateParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerCreateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerInspectParams creates a new ContainerInspectParams object
// with the default values initialized.
func NewContainerInspectParams() *ContainerInspectParams {
	var (
		sizeDefault = bool(false)
	)
	return &ContainerInspectParams{
		Size: &sizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewContainerInspectParamsWithTimeout creates a new ContainerInspectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContainerInspectParamsWithTimeout(timeout time.Duration) *ContainerInspectParams {
	var (
		sizeDefault = bool(false)
	)
	return &ContainerInspectParams{
		Size: &sizeDefault,

		timeout: timeout,
	}
}

// NewContainerInspectParamsWithContext creates a new ContainerInspectParams object
// with the default values initialized, and the ability to set a context for a request
func NewContainerInspectParamsWithContext(ctx context.Context) *ContainerInspectParams {
	var (
		sizeDefault = bool(false)
	)
	return &ContainerInspectParams{
		Size: &sizeDefault,

		Context: ctx,
	}
}

// NewContainerInspectParamsWithHTTPClient creates a new ContainerInspectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContainerInspectParamsWithHTTPClient(client *http.Client) *ContainerInspectParams {
	var (
		sizeDefault = bool(false)
	)
	return &ContainerInspectParams{
		Size:       &sizeDefault,
		HTTPClient: client,
	}
}

/*ContainerInspectParams contains all the parameters to send to the API endpoint
for the container inspect operation typically these are written to a http.Request
*/
type ContainerInspectParams struct {

	/*ID
	  ID or name of the container

	*/
	ID string
	/*Size
	  Return the size of container as fields `SizeRw` and `SizeRootFs`

	*/
	Size *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the container inspect params
func (o *ContainerInspectParams) WithTimeout(timeout time.Duration) *ContainerInspectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container inspect params
func (o *ContainerInspectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container inspect params
func (o *ContainerInspectParams) WithContext(ctx context.Context) *ContainerInspectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container inspect params
func (o *ContainerInspectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container inspect params
func (o *ContainerInspectParams) WithHTTPClient(client *http.Client) *ContainerInspectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container inspect params
func (o *ContainerInspectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the container inspect params
func (o *ContainerInspectParams) WithID(id string) *ContainerInspectParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the container inspect params
func (o *ContainerInspectParams) SetID(id string) {
	o.ID = id
}

// WithSize adds the size to the container inspect params
func (o *ContainerInspectParams) WithSize(size *bool) *ContainerInspectParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the container inspect params
func (o *ContainerInspectParams) SetSize(size *bool) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerInspectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Size != nil {

		// query param size
		var qrSize bool
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatBool(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

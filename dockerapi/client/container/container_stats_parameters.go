// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerStatsParams creates a new ContainerStatsParams object
// with the default values initialized.
func NewContainerStatsParams() *ContainerStatsParams {
	var (
		streamDefault = bool(true)
	)
	return &ContainerStatsParams{
		Stream: &streamDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewContainerStatsParamsWithTimeout creates a new ContainerStatsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContainerStatsParamsWithTimeout(timeout time.Duration) *ContainerStatsParams {
	var (
		streamDefault = bool(true)
	)
	return &ContainerStatsParams{
		Stream: &streamDefault,

		timeout: timeout,
	}
}

// NewContainerStatsParamsWithContext creates a new ContainerStatsParams object
// with the default values initialized, and the ability to set a context for a request
func NewContainerStatsParamsWithContext(ctx context.Context) *ContainerStatsParams {
	var (
		streamDefault = bool(true)
	)
	return &ContainerStatsParams{
		Stream: &streamDefault,

		Context: ctx,
	}
}

// NewContainerStatsParamsWithHTTPClient creates a new ContainerStatsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContainerStatsParamsWithHTTPClient(client *http.Client) *ContainerStatsParams {
	var (
		streamDefault = bool(true)
	)
	return &ContainerStatsParams{
		Stream:     &streamDefault,
		HTTPClient: client,
	}
}

/*ContainerStatsParams contains all the parameters to send to the API endpoint
for the container stats operation typically these are written to a http.Request
*/
type ContainerStatsParams struct {

	/*ID
	  ID or name of the container

	*/
	ID string
	/*Stream
	  Stream the output. If false, the stats will be output once and then it will disconnect.

	*/
	Stream *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the container stats params
func (o *ContainerStatsParams) WithTimeout(timeout time.Duration) *ContainerStatsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container stats params
func (o *ContainerStatsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container stats params
func (o *ContainerStatsParams) WithContext(ctx context.Context) *ContainerStatsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container stats params
func (o *ContainerStatsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container stats params
func (o *ContainerStatsParams) WithHTTPClient(client *http.Client) *ContainerStatsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container stats params
func (o *ContainerStatsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the container stats params
func (o *ContainerStatsParams) WithID(id string) *ContainerStatsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the container stats params
func (o *ContainerStatsParams) SetID(id string) {
	o.ID = id
}

// WithStream adds the stream to the container stats params
func (o *ContainerStatsParams) WithStream(stream *bool) *ContainerStatsParams {
	o.SetStream(stream)
	return o
}

// SetStream adds the stream to the container stats params
func (o *ContainerStatsParams) SetStream(stream *bool) {
	o.Stream = stream
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerStatsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Stream != nil {

		// query param stream
		var qrStream bool
		if o.Stream != nil {
			qrStream = *o.Stream
		}
		qStream := swag.FormatBool(qrStream)
		if qStream != "" {
			if err := r.SetQueryParam("stream", qStream); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

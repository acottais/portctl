// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutContainerArchiveParams creates a new PutContainerArchiveParams object
// with the default values initialized.
func NewPutContainerArchiveParams() *PutContainerArchiveParams {
	var ()
	return &PutContainerArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutContainerArchiveParamsWithTimeout creates a new PutContainerArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutContainerArchiveParamsWithTimeout(timeout time.Duration) *PutContainerArchiveParams {
	var ()
	return &PutContainerArchiveParams{

		timeout: timeout,
	}
}

// NewPutContainerArchiveParamsWithContext creates a new PutContainerArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutContainerArchiveParamsWithContext(ctx context.Context) *PutContainerArchiveParams {
	var ()
	return &PutContainerArchiveParams{

		Context: ctx,
	}
}

// NewPutContainerArchiveParamsWithHTTPClient creates a new PutContainerArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutContainerArchiveParamsWithHTTPClient(client *http.Client) *PutContainerArchiveParams {
	var ()
	return &PutContainerArchiveParams{
		HTTPClient: client,
	}
}

/*PutContainerArchiveParams contains all the parameters to send to the API endpoint
for the put container archive operation typically these are written to a http.Request
*/
type PutContainerArchiveParams struct {

	/*ID
	  ID or name of the container

	*/
	ID string
	/*InputStream
	  The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.

	*/
	InputStream string
	/*NoOverwriteDirNonDir
	  If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa.

	*/
	NoOverwriteDirNonDir *string
	/*Path
	  Path to a directory in the container to extract the archive’s contents into.

	*/
	Path string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put container archive params
func (o *PutContainerArchiveParams) WithTimeout(timeout time.Duration) *PutContainerArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put container archive params
func (o *PutContainerArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put container archive params
func (o *PutContainerArchiveParams) WithContext(ctx context.Context) *PutContainerArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put container archive params
func (o *PutContainerArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put container archive params
func (o *PutContainerArchiveParams) WithHTTPClient(client *http.Client) *PutContainerArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put container archive params
func (o *PutContainerArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put container archive params
func (o *PutContainerArchiveParams) WithID(id string) *PutContainerArchiveParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put container archive params
func (o *PutContainerArchiveParams) SetID(id string) {
	o.ID = id
}

// WithInputStream adds the inputStream to the put container archive params
func (o *PutContainerArchiveParams) WithInputStream(inputStream string) *PutContainerArchiveParams {
	o.SetInputStream(inputStream)
	return o
}

// SetInputStream adds the inputStream to the put container archive params
func (o *PutContainerArchiveParams) SetInputStream(inputStream string) {
	o.InputStream = inputStream
}

// WithNoOverwriteDirNonDir adds the noOverwriteDirNonDir to the put container archive params
func (o *PutContainerArchiveParams) WithNoOverwriteDirNonDir(noOverwriteDirNonDir *string) *PutContainerArchiveParams {
	o.SetNoOverwriteDirNonDir(noOverwriteDirNonDir)
	return o
}

// SetNoOverwriteDirNonDir adds the noOverwriteDirNonDir to the put container archive params
func (o *PutContainerArchiveParams) SetNoOverwriteDirNonDir(noOverwriteDirNonDir *string) {
	o.NoOverwriteDirNonDir = noOverwriteDirNonDir
}

// WithPath adds the path to the put container archive params
func (o *PutContainerArchiveParams) WithPath(path string) *PutContainerArchiveParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the put container archive params
func (o *PutContainerArchiveParams) SetPath(path string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *PutContainerArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.InputStream); err != nil {
		return err
	}

	if o.NoOverwriteDirNonDir != nil {

		// query param noOverwriteDirNonDir
		var qrNoOverwriteDirNonDir string
		if o.NoOverwriteDirNonDir != nil {
			qrNoOverwriteDirNonDir = *o.NoOverwriteDirNonDir
		}
		qNoOverwriteDirNonDir := qrNoOverwriteDirNonDir
		if qNoOverwriteDirNonDir != "" {
			if err := r.SetQueryParam("noOverwriteDirNonDir", qNoOverwriteDirNonDir); err != nil {
				return err
			}
		}

	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

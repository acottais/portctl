// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ContainerInspectReader is a Reader for the ContainerInspect structure.
type ContainerInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewContainerInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewContainerInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewContainerInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewContainerInspectOK creates a ContainerInspectOK with default headers values
func NewContainerInspectOK() *ContainerInspectOK {
	return &ContainerInspectOK{}
}

/*ContainerInspectOK handles this case with default header values.

no error
*/
type ContainerInspectOK struct {
	Payload *ContainerInspectOKBody
}

func (o *ContainerInspectOK) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/json][%d] containerInspectOK  %+v", 200, o.Payload)
}

func (o *ContainerInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ContainerInspectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerInspectNotFound creates a ContainerInspectNotFound with default headers values
func NewContainerInspectNotFound() *ContainerInspectNotFound {
	return &ContainerInspectNotFound{}
}

/*ContainerInspectNotFound handles this case with default header values.

no such container
*/
type ContainerInspectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ContainerInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/json][%d] containerInspectNotFound  %+v", 404, o.Payload)
}

func (o *ContainerInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerInspectInternalServerError creates a ContainerInspectInternalServerError with default headers values
func NewContainerInspectInternalServerError() *ContainerInspectInternalServerError {
	return &ContainerInspectInternalServerError{}
}

/*ContainerInspectInternalServerError handles this case with default header values.

server error
*/
type ContainerInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ContainerInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{id}/json][%d] containerInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContainerInspectOKBody ContainerInspectResponse
swagger:model ContainerInspectOKBody
*/
type ContainerInspectOKBody struct {

	// app armor profile
	AppArmorProfile string `json:"AppArmorProfile,omitempty"`

	// The arguments to the command being run
	Args []string `json:"Args"`

	// config
	Config *models.ContainerConfig `json:"Config,omitempty"`

	// The time the container was created
	Created string `json:"Created,omitempty"`

	// driver
	Driver string `json:"Driver,omitempty"`

	// IDs of exec instances that are running in the container.
	ExecIds []string `json:"ExecIDs"`

	// graph driver
	GraphDriver *models.GraphDriverData `json:"GraphDriver,omitempty"`

	// host config
	HostConfig *models.HostConfig `json:"HostConfig,omitempty"`

	// hostname path
	HostnamePath string `json:"HostnamePath,omitempty"`

	// hosts path
	HostsPath string `json:"HostsPath,omitempty"`

	// The ID of the container
	ID string `json:"Id,omitempty"`

	// The container's image
	Image string `json:"Image,omitempty"`

	// log path
	LogPath string `json:"LogPath,omitempty"`

	// mount label
	MountLabel string `json:"MountLabel,omitempty"`

	// mounts
	Mounts []*models.MountPoint `json:"Mounts"`

	// name
	Name string `json:"Name,omitempty"`

	// network settings
	NetworkSettings *models.NetworkSettings `json:"NetworkSettings,omitempty"`

	// TODO
	Node interface{} `json:"Node,omitempty"`

	// The path to the command being run
	Path string `json:"Path,omitempty"`

	// process label
	ProcessLabel string `json:"ProcessLabel,omitempty"`

	// resolv conf path
	ResolvConfPath string `json:"ResolvConfPath,omitempty"`

	// restart count
	RestartCount int64 `json:"RestartCount,omitempty"`

	// The total size of all the files in this container.
	SizeRootFs int64 `json:"SizeRootFs,omitempty"`

	// The size of files that have been created or changed by this container.
	SizeRw int64 `json:"SizeRw,omitempty"`

	// state
	State *ContainerInspectOKBodyState `json:"State,omitempty"`
}

// Validate validates this container inspect o k body
func (o *ContainerInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContainerInspectOKBody) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.Config) { // not required
		return nil
	}

	if o.Config != nil {
		if err := o.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInspectOK" + "." + "Config")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerInspectOKBody) validateGraphDriver(formats strfmt.Registry) error {

	if swag.IsZero(o.GraphDriver) { // not required
		return nil
	}

	if o.GraphDriver != nil {
		if err := o.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInspectOK" + "." + "GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerInspectOKBody) validateHostConfig(formats strfmt.Registry) error {

	if swag.IsZero(o.HostConfig) { // not required
		return nil
	}

	if o.HostConfig != nil {
		if err := o.HostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInspectOK" + "." + "HostConfig")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerInspectOKBody) validateMounts(formats strfmt.Registry) error {

	if swag.IsZero(o.Mounts) { // not required
		return nil
	}

	for i := 0; i < len(o.Mounts); i++ {
		if swag.IsZero(o.Mounts[i]) { // not required
			continue
		}

		if o.Mounts[i] != nil {
			if err := o.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containerInspectOK" + "." + "Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ContainerInspectOKBody) validateNetworkSettings(formats strfmt.Registry) error {

	if swag.IsZero(o.NetworkSettings) { // not required
		return nil
	}

	if o.NetworkSettings != nil {
		if err := o.NetworkSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInspectOK" + "." + "NetworkSettings")
			}
			return err
		}
	}

	return nil
}

func (o *ContainerInspectOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containerInspectOK" + "." + "State")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContainerInspectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerInspectOKBody) UnmarshalBinary(b []byte) error {
	var res ContainerInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ContainerInspectOKBodyState The state of the container.
swagger:model ContainerInspectOKBodyState
*/
type ContainerInspectOKBodyState struct {

	// dead
	Dead bool `json:"Dead,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// The last exit code of this container
	ExitCode int64 `json:"ExitCode,omitempty"`

	// The time when this container last exited.
	FinishedAt string `json:"FinishedAt,omitempty"`

	// Whether this container has been killed because it ran out of memory.
	OOMKilled bool `json:"OOMKilled,omitempty"`

	// Whether this container is paused.
	Paused bool `json:"Paused,omitempty"`

	// The process ID of this container
	Pid int64 `json:"Pid,omitempty"`

	// Whether this container is restarting.
	Restarting bool `json:"Restarting,omitempty"`

	// Whether this container is running.
	//
	// Note that a running container can be _paused_. The `Running` and `Paused`
	// booleans are not mutually exclusive:
	//
	// When pausing a container (on Linux), the cgroups freezer is used to suspend
	// all processes in the container. Freezing the process requires the process to
	// be running. As a result, paused containers are both `Running` _and_ `Paused`.
	//
	// Use the `Status` field instead to determine if a container's state is "running".
	//
	Running bool `json:"Running,omitempty"`

	// The time when this container was last started.
	StartedAt string `json:"StartedAt,omitempty"`

	// The status of the container. For example, `"running"` or `"exited"`.
	//
	// Enum: [created running paused restarting removing exited dead]
	Status string `json:"Status,omitempty"`
}

// Validate validates this container inspect o k body state
func (o *ContainerInspectOKBodyState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var containerInspectOKBodyStateTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["created","running","paused","restarting","removing","exited","dead"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		containerInspectOKBodyStateTypeStatusPropEnum = append(containerInspectOKBodyStateTypeStatusPropEnum, v)
	}
}

const (

	// ContainerInspectOKBodyStateStatusCreated captures enum value "created"
	ContainerInspectOKBodyStateStatusCreated string = "created"

	// ContainerInspectOKBodyStateStatusRunning captures enum value "running"
	ContainerInspectOKBodyStateStatusRunning string = "running"

	// ContainerInspectOKBodyStateStatusPaused captures enum value "paused"
	ContainerInspectOKBodyStateStatusPaused string = "paused"

	// ContainerInspectOKBodyStateStatusRestarting captures enum value "restarting"
	ContainerInspectOKBodyStateStatusRestarting string = "restarting"

	// ContainerInspectOKBodyStateStatusRemoving captures enum value "removing"
	ContainerInspectOKBodyStateStatusRemoving string = "removing"

	// ContainerInspectOKBodyStateStatusExited captures enum value "exited"
	ContainerInspectOKBodyStateStatusExited string = "exited"

	// ContainerInspectOKBodyStateStatusDead captures enum value "dead"
	ContainerInspectOKBodyStateStatusDead string = "dead"
)

// prop value enum
func (o *ContainerInspectOKBodyState) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, containerInspectOKBodyStateTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ContainerInspectOKBodyState) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("containerInspectOK"+"."+"State"+"."+"Status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContainerInspectOKBodyState) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerInspectOKBodyState) UnmarshalBinary(b []byte) error {
	var res ContainerInspectOKBodyState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

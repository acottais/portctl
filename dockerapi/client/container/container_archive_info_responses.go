// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ContainerArchiveInfoReader is a Reader for the ContainerArchiveInfo structure.
type ContainerArchiveInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContainerArchiveInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewContainerArchiveInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewContainerArchiveInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewContainerArchiveInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewContainerArchiveInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewContainerArchiveInfoOK creates a ContainerArchiveInfoOK with default headers values
func NewContainerArchiveInfoOK() *ContainerArchiveInfoOK {
	return &ContainerArchiveInfoOK{}
}

/*ContainerArchiveInfoOK handles this case with default header values.

no error
*/
type ContainerArchiveInfoOK struct {
	/*A base64 - encoded JSON object with some filesystem header information about the path
	 */
	XDockerContainerPathStat string
}

func (o *ContainerArchiveInfoOK) Error() string {
	return fmt.Sprintf("[HEAD /containers/{id}/archive][%d] containerArchiveInfoOK ", 200)
}

func (o *ContainerArchiveInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Docker-Container-Path-Stat
	o.XDockerContainerPathStat = response.GetHeader("X-Docker-Container-Path-Stat")

	return nil
}

// NewContainerArchiveInfoBadRequest creates a ContainerArchiveInfoBadRequest with default headers values
func NewContainerArchiveInfoBadRequest() *ContainerArchiveInfoBadRequest {
	return &ContainerArchiveInfoBadRequest{}
}

/*ContainerArchiveInfoBadRequest handles this case with default header values.

Bad parameter
*/
type ContainerArchiveInfoBadRequest struct {
	Payload *ContainerArchiveInfoBadRequestBody
}

func (o *ContainerArchiveInfoBadRequest) Error() string {
	return fmt.Sprintf("[HEAD /containers/{id}/archive][%d] containerArchiveInfoBadRequest  %+v", 400, o.Payload)
}

func (o *ContainerArchiveInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ContainerArchiveInfoBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveInfoNotFound creates a ContainerArchiveInfoNotFound with default headers values
func NewContainerArchiveInfoNotFound() *ContainerArchiveInfoNotFound {
	return &ContainerArchiveInfoNotFound{}
}

/*ContainerArchiveInfoNotFound handles this case with default header values.

Container or path does not exist
*/
type ContainerArchiveInfoNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ContainerArchiveInfoNotFound) Error() string {
	return fmt.Sprintf("[HEAD /containers/{id}/archive][%d] containerArchiveInfoNotFound  %+v", 404, o.Payload)
}

func (o *ContainerArchiveInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContainerArchiveInfoInternalServerError creates a ContainerArchiveInfoInternalServerError with default headers values
func NewContainerArchiveInfoInternalServerError() *ContainerArchiveInfoInternalServerError {
	return &ContainerArchiveInfoInternalServerError{}
}

/*ContainerArchiveInfoInternalServerError handles this case with default header values.

Server error
*/
type ContainerArchiveInfoInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ContainerArchiveInfoInternalServerError) Error() string {
	return fmt.Sprintf("[HEAD /containers/{id}/archive][%d] containerArchiveInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *ContainerArchiveInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContainerArchiveInfoBadRequestBody container archive info bad request body
swagger:model ContainerArchiveInfoBadRequestBody
*/
type ContainerArchiveInfoBadRequestBody struct {
	models.ErrorResponse

	// The error message. Either "must specify path parameter" (path cannot be empty) or "not a directory" (path was asserted to be a directory but exists as a file).
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContainerArchiveInfoBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ContainerArchiveInfoBadRequestBodyAO0
	var containerArchiveInfoBadRequestBodyAO0 models.ErrorResponse
	if err := swag.ReadJSON(raw, &containerArchiveInfoBadRequestBodyAO0); err != nil {
		return err
	}
	o.ErrorResponse = containerArchiveInfoBadRequestBodyAO0

	// ContainerArchiveInfoBadRequestBodyAO1
	var dataContainerArchiveInfoBadRequestBodyAO1 struct {
		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataContainerArchiveInfoBadRequestBodyAO1); err != nil {
		return err
	}

	o.Message = dataContainerArchiveInfoBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContainerArchiveInfoBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	containerArchiveInfoBadRequestBodyAO0, err := swag.WriteJSON(o.ErrorResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, containerArchiveInfoBadRequestBodyAO0)

	var dataContainerArchiveInfoBadRequestBodyAO1 struct {
		Message string `json:"message,omitempty"`
	}

	dataContainerArchiveInfoBadRequestBodyAO1.Message = o.Message

	jsonDataContainerArchiveInfoBadRequestBodyAO1, errContainerArchiveInfoBadRequestBodyAO1 := swag.WriteJSON(dataContainerArchiveInfoBadRequestBodyAO1)
	if errContainerArchiveInfoBadRequestBodyAO1 != nil {
		return nil, errContainerArchiveInfoBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataContainerArchiveInfoBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this container archive info bad request body
func (o *ContainerArchiveInfoBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ErrorResponse
	if err := o.ErrorResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ContainerArchiveInfoBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContainerArchiveInfoBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ContainerArchiveInfoBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

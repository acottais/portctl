// Code generated by go-swagger; DO NOT EDIT.

package container

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewContainerKillParams creates a new ContainerKillParams object
// with the default values initialized.
func NewContainerKillParams() *ContainerKillParams {
	var (
		signalDefault = string("SIGKILL")
	)
	return &ContainerKillParams{
		Signal: &signalDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewContainerKillParamsWithTimeout creates a new ContainerKillParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContainerKillParamsWithTimeout(timeout time.Duration) *ContainerKillParams {
	var (
		signalDefault = string("SIGKILL")
	)
	return &ContainerKillParams{
		Signal: &signalDefault,

		timeout: timeout,
	}
}

// NewContainerKillParamsWithContext creates a new ContainerKillParams object
// with the default values initialized, and the ability to set a context for a request
func NewContainerKillParamsWithContext(ctx context.Context) *ContainerKillParams {
	var (
		signalDefault = string("SIGKILL")
	)
	return &ContainerKillParams{
		Signal: &signalDefault,

		Context: ctx,
	}
}

// NewContainerKillParamsWithHTTPClient creates a new ContainerKillParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContainerKillParamsWithHTTPClient(client *http.Client) *ContainerKillParams {
	var (
		signalDefault = string("SIGKILL")
	)
	return &ContainerKillParams{
		Signal:     &signalDefault,
		HTTPClient: client,
	}
}

/*ContainerKillParams contains all the parameters to send to the API endpoint
for the container kill operation typically these are written to a http.Request
*/
type ContainerKillParams struct {

	/*ID
	  ID or name of the container

	*/
	ID string
	/*Signal
	  Signal to send to the container as an integer or string (e.g. `SIGINT`)

	*/
	Signal *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the container kill params
func (o *ContainerKillParams) WithTimeout(timeout time.Duration) *ContainerKillParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the container kill params
func (o *ContainerKillParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the container kill params
func (o *ContainerKillParams) WithContext(ctx context.Context) *ContainerKillParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the container kill params
func (o *ContainerKillParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the container kill params
func (o *ContainerKillParams) WithHTTPClient(client *http.Client) *ContainerKillParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the container kill params
func (o *ContainerKillParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the container kill params
func (o *ContainerKillParams) WithID(id string) *ContainerKillParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the container kill params
func (o *ContainerKillParams) SetID(id string) {
	o.ID = id
}

// WithSignal adds the signal to the container kill params
func (o *ContainerKillParams) WithSignal(signal *string) *ContainerKillParams {
	o.SetSignal(signal)
	return o
}

// SetSignal adds the signal to the container kill params
func (o *ContainerKillParams) SetSignal(signal *string) {
	o.Signal = signal
}

// WriteToRequest writes these params to a swagger request
func (o *ContainerKillParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Signal != nil {

		// query param signal
		var qrSignal string
		if o.Signal != nil {
			qrSignal = *o.Signal
		}
		qSignal := qrSignal
		if qSignal != "" {
			if err := r.SetQueryParam("signal", qSignal); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// NetworkListReader is a Reader for the NetworkList structure.
type NetworkListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NetworkListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNetworkListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewNetworkListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNetworkListOK creates a NetworkListOK with default headers values
func NewNetworkListOK() *NetworkListOK {
	return &NetworkListOK{}
}

/*NetworkListOK handles this case with default header values.

No error
*/
type NetworkListOK struct {
	Payload []*models.Network
}

func (o *NetworkListOK) Error() string {
	return fmt.Sprintf("[GET /networks][%d] networkListOK  %+v", 200, o.Payload)
}

func (o *NetworkListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNetworkListInternalServerError creates a NetworkListInternalServerError with default headers values
func NewNetworkListInternalServerError() *NetworkListInternalServerError {
	return &NetworkListInternalServerError{}
}

/*NetworkListInternalServerError handles this case with default header values.

Server error
*/
type NetworkListInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *NetworkListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /networks][%d] networkListInternalServerError  %+v", 500, o.Payload)
}

func (o *NetworkListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

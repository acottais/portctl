// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new swarm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for swarm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SwarmInit initializes a new swarm
*/
func (a *Client) SwarmInit(params *SwarmInitParams) (*SwarmInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmInitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmInit",
		Method:             "POST",
		PathPattern:        "/swarm/init",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmInitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmInitOK), nil

}

/*
SwarmInspect inspects swarm
*/
func (a *Client) SwarmInspect(params *SwarmInspectParams) (*SwarmInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmInspect",
		Method:             "GET",
		PathPattern:        "/swarm",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmInspectOK), nil

}

/*
SwarmJoin joins an existing swarm
*/
func (a *Client) SwarmJoin(params *SwarmJoinParams) (*SwarmJoinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmJoinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmJoin",
		Method:             "POST",
		PathPattern:        "/swarm/join",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmJoinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmJoinOK), nil

}

/*
SwarmLeave leaves a swarm
*/
func (a *Client) SwarmLeave(params *SwarmLeaveParams) (*SwarmLeaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmLeaveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmLeave",
		Method:             "POST",
		PathPattern:        "/swarm/leave",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmLeaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmLeaveOK), nil

}

/*
SwarmUnlock unlocks a locked manager
*/
func (a *Client) SwarmUnlock(params *SwarmUnlockParams) (*SwarmUnlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmUnlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmUnlock",
		Method:             "POST",
		PathPattern:        "/swarm/unlock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmUnlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmUnlockOK), nil

}

/*
SwarmUnlockkey gets the unlock key
*/
func (a *Client) SwarmUnlockkey(params *SwarmUnlockkeyParams) (*SwarmUnlockkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmUnlockkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmUnlockkey",
		Method:             "GET",
		PathPattern:        "/swarm/unlockkey",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmUnlockkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmUnlockkeyOK), nil

}

/*
SwarmUpdate updates a swarm
*/
func (a *Client) SwarmUpdate(params *SwarmUpdateParams) (*SwarmUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSwarmUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SwarmUpdate",
		Method:             "POST",
		PathPattern:        "/swarm/update",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SwarmUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SwarmUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package swarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SwarmInitReader is a Reader for the SwarmInit structure.
type SwarmInitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwarmInitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSwarmInitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSwarmInitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSwarmInitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewSwarmInitServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSwarmInitOK creates a SwarmInitOK with default headers values
func NewSwarmInitOK() *SwarmInitOK {
	return &SwarmInitOK{}
}

/*SwarmInitOK handles this case with default header values.

no error
*/
type SwarmInitOK struct {
	Payload string
}

func (o *SwarmInitOK) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitOK  %+v", 200, o.Payload)
}

func (o *SwarmInitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitBadRequest creates a SwarmInitBadRequest with default headers values
func NewSwarmInitBadRequest() *SwarmInitBadRequest {
	return &SwarmInitBadRequest{}
}

/*SwarmInitBadRequest handles this case with default header values.

bad parameter
*/
type SwarmInitBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitBadRequest) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitBadRequest  %+v", 400, o.Payload)
}

func (o *SwarmInitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitInternalServerError creates a SwarmInitInternalServerError with default headers values
func NewSwarmInitInternalServerError() *SwarmInitInternalServerError {
	return &SwarmInitInternalServerError{}
}

/*SwarmInitInternalServerError handles this case with default header values.

server error
*/
type SwarmInitInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitInternalServerError  %+v", 500, o.Payload)
}

func (o *SwarmInitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwarmInitServiceUnavailable creates a SwarmInitServiceUnavailable with default headers values
func NewSwarmInitServiceUnavailable() *SwarmInitServiceUnavailable {
	return &SwarmInitServiceUnavailable{}
}

/*SwarmInitServiceUnavailable handles this case with default header values.

node is already part of a swarm
*/
type SwarmInitServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SwarmInitServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /swarm/init][%d] swarmInitServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SwarmInitServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SwarmInitBody swarm init body
swagger:model SwarmInitBody
*/
type SwarmInitBody struct {

	// Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.
	AdvertiseAddr string `json:"AdvertiseAddr,omitempty"`

	// Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`,
	// or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr`
	// is used.
	//
	// The `DataPathAddr` specifies the address that global scope network drivers will publish towards other
	// nodes in order to reach the containers running on this node. Using this parameter it is possible to
	// separate the container data traffic from the management traffic of the cluster.
	//
	DataPathAddr string `json:"DataPathAddr,omitempty"`

	// DataPathPort specifies the data path port number for data traffic.
	// Acceptable port range is 1024 to 49151.
	// if no port is set or is set to 0, default port 4789 will be used.
	//
	DataPathPort uint32 `json:"DataPathPort,omitempty"`

	// Default Address Pool specifies default subnet pools for global scope networks.
	//
	DefaultAddrPool []string `json:"DefaultAddrPool"`

	// Force creation of a new swarm.
	ForceNewCluster bool `json:"ForceNewCluster,omitempty"`

	// Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used.
	ListenAddr string `json:"ListenAddr,omitempty"`

	// spec
	Spec *models.SwarmSpec `json:"Spec,omitempty"`

	// SubnetSize specifies the subnet size of the networks created from the default subnet pool
	//
	SubnetSize uint32 `json:"SubnetSize,omitempty"`
}

// Validate validates this swarm init body
func (o *SwarmInitBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SwarmInitBody) validateSpec(formats strfmt.Registry) error {

	if swag.IsZero(o.Spec) { // not required
		return nil
	}

	if o.Spec != nil {
		if err := o.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "Spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SwarmInitBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SwarmInitBody) UnmarshalBinary(b []byte) error {
	var res SwarmInitBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

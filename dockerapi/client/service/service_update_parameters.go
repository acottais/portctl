// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewServiceUpdateParams creates a new ServiceUpdateParams object
// with the default values initialized.
func NewServiceUpdateParams() *ServiceUpdateParams {
	var (
		registryAuthFromDefault = string("spec")
	)
	return &ServiceUpdateParams{
		RegistryAuthFrom: &registryAuthFromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewServiceUpdateParamsWithTimeout creates a new ServiceUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewServiceUpdateParamsWithTimeout(timeout time.Duration) *ServiceUpdateParams {
	var (
		registryAuthFromDefault = string("spec")
	)
	return &ServiceUpdateParams{
		RegistryAuthFrom: &registryAuthFromDefault,

		timeout: timeout,
	}
}

// NewServiceUpdateParamsWithContext creates a new ServiceUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewServiceUpdateParamsWithContext(ctx context.Context) *ServiceUpdateParams {
	var (
		registryAuthFromDefault = string("spec")
	)
	return &ServiceUpdateParams{
		RegistryAuthFrom: &registryAuthFromDefault,

		Context: ctx,
	}
}

// NewServiceUpdateParamsWithHTTPClient creates a new ServiceUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewServiceUpdateParamsWithHTTPClient(client *http.Client) *ServiceUpdateParams {
	var (
		registryAuthFromDefault = string("spec")
	)
	return &ServiceUpdateParams{
		RegistryAuthFrom: &registryAuthFromDefault,
		HTTPClient:       client,
	}
}

/*ServiceUpdateParams contains all the parameters to send to the API endpoint
for the service update operation typically these are written to a http.Request
*/
type ServiceUpdateParams struct {

	/*XRegistryAuth
	  A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication)

	*/
	XRegistryAuth *string
	/*Body*/
	Body ServiceUpdateBody
	/*ID
	  ID or name of service.

	*/
	ID string
	/*RegistryAuthFrom
	  If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are `spec` and `previous-spec`.

	*/
	RegistryAuthFrom *string
	/*Rollback
	  Set to this parameter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case.

	*/
	Rollback *string
	/*Version
	  The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling `GET /services/{id}`

	*/
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the service update params
func (o *ServiceUpdateParams) WithTimeout(timeout time.Duration) *ServiceUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the service update params
func (o *ServiceUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the service update params
func (o *ServiceUpdateParams) WithContext(ctx context.Context) *ServiceUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the service update params
func (o *ServiceUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the service update params
func (o *ServiceUpdateParams) WithHTTPClient(client *http.Client) *ServiceUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the service update params
func (o *ServiceUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the service update params
func (o *ServiceUpdateParams) WithXRegistryAuth(xRegistryAuth *string) *ServiceUpdateParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the service update params
func (o *ServiceUpdateParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithBody adds the body to the service update params
func (o *ServiceUpdateParams) WithBody(body ServiceUpdateBody) *ServiceUpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the service update params
func (o *ServiceUpdateParams) SetBody(body ServiceUpdateBody) {
	o.Body = body
}

// WithID adds the id to the service update params
func (o *ServiceUpdateParams) WithID(id string) *ServiceUpdateParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the service update params
func (o *ServiceUpdateParams) SetID(id string) {
	o.ID = id
}

// WithRegistryAuthFrom adds the registryAuthFrom to the service update params
func (o *ServiceUpdateParams) WithRegistryAuthFrom(registryAuthFrom *string) *ServiceUpdateParams {
	o.SetRegistryAuthFrom(registryAuthFrom)
	return o
}

// SetRegistryAuthFrom adds the registryAuthFrom to the service update params
func (o *ServiceUpdateParams) SetRegistryAuthFrom(registryAuthFrom *string) {
	o.RegistryAuthFrom = registryAuthFrom
}

// WithRollback adds the rollback to the service update params
func (o *ServiceUpdateParams) WithRollback(rollback *string) *ServiceUpdateParams {
	o.SetRollback(rollback)
	return o
}

// SetRollback adds the rollback to the service update params
func (o *ServiceUpdateParams) SetRollback(rollback *string) {
	o.Rollback = rollback
}

// WithVersion adds the version to the service update params
func (o *ServiceUpdateParams) WithVersion(version int64) *ServiceUpdateParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the service update params
func (o *ServiceUpdateParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *ServiceUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}

	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.RegistryAuthFrom != nil {

		// query param registryAuthFrom
		var qrRegistryAuthFrom string
		if o.RegistryAuthFrom != nil {
			qrRegistryAuthFrom = *o.RegistryAuthFrom
		}
		qRegistryAuthFrom := qrRegistryAuthFrom
		if qRegistryAuthFrom != "" {
			if err := r.SetQueryParam("registryAuthFrom", qRegistryAuthFrom); err != nil {
				return err
			}
		}

	}

	if o.Rollback != nil {

		// query param rollback
		var qrRollback string
		if o.Rollback != nil {
			qrRollback = *o.Rollback
		}
		qRollback := qrRollback
		if qRollback != "" {
			if err := r.SetQueryParam("rollback", qRollback); err != nil {
				return err
			}
		}

	}

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

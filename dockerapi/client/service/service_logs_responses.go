// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ServiceLogsReader is a Reader for the ServiceLogs structure.
type ServiceLogsReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ServiceLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewServiceLogsOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewServiceLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewServiceLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewServiceLogsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewServiceLogsOK creates a ServiceLogsOK with default headers values
func NewServiceLogsOK(writer io.Writer) *ServiceLogsOK {
	return &ServiceLogsOK{
		Payload: writer,
	}
}

/*ServiceLogsOK handles this case with default header values.

logs returned as a stream in response body
*/
type ServiceLogsOK struct {
	Payload io.Writer
}

func (o *ServiceLogsOK) Error() string {
	return fmt.Sprintf("[GET /services/{id}/logs][%d] serviceLogsOK  %+v", 200, o.Payload)
}

func (o *ServiceLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceLogsNotFound creates a ServiceLogsNotFound with default headers values
func NewServiceLogsNotFound() *ServiceLogsNotFound {
	return &ServiceLogsNotFound{}
}

/*ServiceLogsNotFound handles this case with default header values.

no such service
*/
type ServiceLogsNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ServiceLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{id}/logs][%d] serviceLogsNotFound  %+v", 404, o.Payload)
}

func (o *ServiceLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceLogsInternalServerError creates a ServiceLogsInternalServerError with default headers values
func NewServiceLogsInternalServerError() *ServiceLogsInternalServerError {
	return &ServiceLogsInternalServerError{}
}

/*ServiceLogsInternalServerError handles this case with default header values.

server error
*/
type ServiceLogsInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ServiceLogsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /services/{id}/logs][%d] serviceLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *ServiceLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceLogsServiceUnavailable creates a ServiceLogsServiceUnavailable with default headers values
func NewServiceLogsServiceUnavailable() *ServiceLogsServiceUnavailable {
	return &ServiceLogsServiceUnavailable{}
}

/*ServiceLogsServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type ServiceLogsServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *ServiceLogsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /services/{id}/logs][%d] serviceLogsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ServiceLogsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

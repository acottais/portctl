// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ConfigDeleteReader is a Reader for the ConfigDelete structure.
type ConfigDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewConfigDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewConfigDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewConfigDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewConfigDeleteServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewConfigDeleteNoContent creates a ConfigDeleteNoContent with default headers values
func NewConfigDeleteNoContent() *ConfigDeleteNoContent {
	return &ConfigDeleteNoContent{}
}

/*ConfigDeleteNoContent handles this case with default header values.

no error
*/
type ConfigDeleteNoContent struct {
}

func (o *ConfigDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /configs/{id}][%d] configDeleteNoContent ", 204)
}

func (o *ConfigDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewConfigDeleteNotFound creates a ConfigDeleteNotFound with default headers values
func NewConfigDeleteNotFound() *ConfigDeleteNotFound {
	return &ConfigDeleteNotFound{}
}

/*ConfigDeleteNotFound handles this case with default header values.

config not found
*/
type ConfigDeleteNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ConfigDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /configs/{id}][%d] configDeleteNotFound  %+v", 404, o.Payload)
}

func (o *ConfigDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigDeleteInternalServerError creates a ConfigDeleteInternalServerError with default headers values
func NewConfigDeleteInternalServerError() *ConfigDeleteInternalServerError {
	return &ConfigDeleteInternalServerError{}
}

/*ConfigDeleteInternalServerError handles this case with default header values.

server error
*/
type ConfigDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ConfigDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /configs/{id}][%d] configDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigDeleteServiceUnavailable creates a ConfigDeleteServiceUnavailable with default headers values
func NewConfigDeleteServiceUnavailable() *ConfigDeleteServiceUnavailable {
	return &ConfigDeleteServiceUnavailable{}
}

/*ConfigDeleteServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type ConfigDeleteServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *ConfigDeleteServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /configs/{id}][%d] configDeleteServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfigDeleteServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

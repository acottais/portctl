// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConfigCreate creates a config
*/
func (a *Client) ConfigCreate(params *ConfigCreateParams) (*ConfigCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigCreate",
		Method:             "POST",
		PathPattern:        "/configs/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigCreateCreated), nil

}

/*
ConfigDelete deletes a config
*/
func (a *Client) ConfigDelete(params *ConfigDeleteParams) (*ConfigDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/configs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigDeleteNoContent), nil

}

/*
ConfigInspect inspects a config
*/
func (a *Client) ConfigInspect(params *ConfigInspectParams) (*ConfigInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigInspect",
		Method:             "GET",
		PathPattern:        "/configs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigInspectOK), nil

}

/*
ConfigList lists configs
*/
func (a *Client) ConfigList(params *ConfigListParams) (*ConfigListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigList",
		Method:             "GET",
		PathPattern:        "/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigListOK), nil

}

/*
ConfigUpdate updates a config
*/
func (a *Client) ConfigUpdate(params *ConfigUpdateParams) (*ConfigUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfigUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConfigUpdate",
		Method:             "POST",
		PathPattern:        "/configs/{id}/update",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConfigUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConfigUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

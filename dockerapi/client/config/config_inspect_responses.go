// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// ConfigInspectReader is a Reader for the ConfigInspect structure.
type ConfigInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfigInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewConfigInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewConfigInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewConfigInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewConfigInspectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewConfigInspectOK creates a ConfigInspectOK with default headers values
func NewConfigInspectOK() *ConfigInspectOK {
	return &ConfigInspectOK{}
}

/*ConfigInspectOK handles this case with default header values.

no error
*/
type ConfigInspectOK struct {
	Payload *models.Config
}

func (o *ConfigInspectOK) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectOK  %+v", 200, o.Payload)
}

func (o *ConfigInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Config)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectNotFound creates a ConfigInspectNotFound with default headers values
func NewConfigInspectNotFound() *ConfigInspectNotFound {
	return &ConfigInspectNotFound{}
}

/*ConfigInspectNotFound handles this case with default header values.

config not found
*/
type ConfigInspectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *ConfigInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectNotFound  %+v", 404, o.Payload)
}

func (o *ConfigInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectInternalServerError creates a ConfigInspectInternalServerError with default headers values
func NewConfigInspectInternalServerError() *ConfigInspectInternalServerError {
	return &ConfigInspectInternalServerError{}
}

/*ConfigInspectInternalServerError handles this case with default header values.

server error
*/
type ConfigInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *ConfigInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfigInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfigInspectServiceUnavailable creates a ConfigInspectServiceUnavailable with default headers values
func NewConfigInspectServiceUnavailable() *ConfigInspectServiceUnavailable {
	return &ConfigInspectServiceUnavailable{}
}

/*ConfigInspectServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type ConfigInspectServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *ConfigInspectServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /configs/{id}][%d] configInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfigInspectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package distribution

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// DistributionInspectReader is a Reader for the DistributionInspect structure.
type DistributionInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DistributionInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDistributionInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDistributionInspectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDistributionInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDistributionInspectOK creates a DistributionInspectOK with default headers values
func NewDistributionInspectOK() *DistributionInspectOK {
	return &DistributionInspectOK{}
}

/*DistributionInspectOK handles this case with default header values.

descriptor and platform information
*/
type DistributionInspectOK struct {
	Payload *DistributionInspectOKBody
}

func (o *DistributionInspectOK) Error() string {
	return fmt.Sprintf("[GET /distribution/{name}/json][%d] distributionInspectOK  %+v", 200, o.Payload)
}

func (o *DistributionInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DistributionInspectOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDistributionInspectUnauthorized creates a DistributionInspectUnauthorized with default headers values
func NewDistributionInspectUnauthorized() *DistributionInspectUnauthorized {
	return &DistributionInspectUnauthorized{}
}

/*DistributionInspectUnauthorized handles this case with default header values.

Failed authentication or no image found
*/
type DistributionInspectUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *DistributionInspectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /distribution/{name}/json][%d] distributionInspectUnauthorized  %+v", 401, o.Payload)
}

func (o *DistributionInspectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDistributionInspectInternalServerError creates a DistributionInspectInternalServerError with default headers values
func NewDistributionInspectInternalServerError() *DistributionInspectInternalServerError {
	return &DistributionInspectInternalServerError{}
}

/*DistributionInspectInternalServerError handles this case with default header values.

Server error
*/
type DistributionInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *DistributionInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /distribution/{name}/json][%d] distributionInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *DistributionInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DistributionInspectOKBody DistributionInspectResponse
swagger:model DistributionInspectOKBody
*/
type DistributionInspectOKBody struct {

	// descriptor
	// Required: true
	Descriptor *DistributionInspectOKBodyDescriptor `json:"Descriptor"`

	// An array containing all platforms supported by the image
	// Required: true
	Platforms []*PlatformsItems0 `json:"Platforms"`
}

// Validate validates this distribution inspect o k body
func (o *DistributionInspectOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePlatforms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DistributionInspectOKBody) validateDescriptor(formats strfmt.Registry) error {

	if err := validate.Required("distributionInspectOK"+"."+"Descriptor", "body", o.Descriptor); err != nil {
		return err
	}

	if o.Descriptor != nil {
		if err := o.Descriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionInspectOK" + "." + "Descriptor")
			}
			return err
		}
	}

	return nil
}

func (o *DistributionInspectOKBody) validatePlatforms(formats strfmt.Registry) error {

	if err := validate.Required("distributionInspectOK"+"."+"Platforms", "body", o.Platforms); err != nil {
		return err
	}

	for i := 0; i < len(o.Platforms); i++ {
		if swag.IsZero(o.Platforms[i]) { // not required
			continue
		}

		if o.Platforms[i] != nil {
			if err := o.Platforms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("distributionInspectOK" + "." + "Platforms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DistributionInspectOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DistributionInspectOKBody) UnmarshalBinary(b []byte) error {
	var res DistributionInspectOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DistributionInspectOKBodyDescriptor A descriptor struct containing digest, media type, and size
swagger:model DistributionInspectOKBodyDescriptor
*/
type DistributionInspectOKBodyDescriptor struct {

	// digest
	Digest string `json:"Digest,omitempty"`

	// media type
	MediaType string `json:"MediaType,omitempty"`

	// size
	Size int64 `json:"Size,omitempty"`

	// urls
	Urls []string `json:"URLs"`
}

// Validate validates this distribution inspect o k body descriptor
func (o *DistributionInspectOKBodyDescriptor) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DistributionInspectOKBodyDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DistributionInspectOKBodyDescriptor) UnmarshalBinary(b []byte) error {
	var res DistributionInspectOKBodyDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PlatformsItems0 platforms items0
swagger:model PlatformsItems0
*/
type PlatformsItems0 struct {

	// architecture
	Architecture string `json:"Architecture,omitempty"`

	// features
	Features []string `json:"Features"`

	// o s
	OS string `json:"OS,omitempty"`

	// o s features
	OSFeatures []string `json:"OSFeatures"`

	// o s version
	OSVersion string `json:"OSVersion,omitempty"`

	// variant
	Variant string `json:"Variant,omitempty"`
}

// Validate validates this platforms items0
func (o *PlatformsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PlatformsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PlatformsItems0) UnmarshalBinary(b []byte) error {
	var res PlatformsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

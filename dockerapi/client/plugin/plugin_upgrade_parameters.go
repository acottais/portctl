// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPluginUpgradeParams creates a new PluginUpgradeParams object
// with the default values initialized.
func NewPluginUpgradeParams() *PluginUpgradeParams {
	var ()
	return &PluginUpgradeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPluginUpgradeParamsWithTimeout creates a new PluginUpgradeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPluginUpgradeParamsWithTimeout(timeout time.Duration) *PluginUpgradeParams {
	var ()
	return &PluginUpgradeParams{

		timeout: timeout,
	}
}

// NewPluginUpgradeParamsWithContext creates a new PluginUpgradeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPluginUpgradeParamsWithContext(ctx context.Context) *PluginUpgradeParams {
	var ()
	return &PluginUpgradeParams{

		Context: ctx,
	}
}

// NewPluginUpgradeParamsWithHTTPClient creates a new PluginUpgradeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPluginUpgradeParamsWithHTTPClient(client *http.Client) *PluginUpgradeParams {
	var ()
	return &PluginUpgradeParams{
		HTTPClient: client,
	}
}

/*PluginUpgradeParams contains all the parameters to send to the API endpoint
for the plugin upgrade operation typically these are written to a http.Request
*/
type PluginUpgradeParams struct {

	/*XRegistryAuth
	  A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)

	*/
	XRegistryAuth *string
	/*Body*/
	Body []*PluginUpgradeParamsBodyItems0
	/*Name
	  The name of the plugin. The `:latest` tag is optional, and is the default if omitted.

	*/
	Name string
	/*Remote
	  Remote reference to upgrade to.

	The `:latest` tag is optional, and is used as the default if omitted.


	*/
	Remote string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the plugin upgrade params
func (o *PluginUpgradeParams) WithTimeout(timeout time.Duration) *PluginUpgradeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the plugin upgrade params
func (o *PluginUpgradeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the plugin upgrade params
func (o *PluginUpgradeParams) WithContext(ctx context.Context) *PluginUpgradeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the plugin upgrade params
func (o *PluginUpgradeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the plugin upgrade params
func (o *PluginUpgradeParams) WithHTTPClient(client *http.Client) *PluginUpgradeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the plugin upgrade params
func (o *PluginUpgradeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the plugin upgrade params
func (o *PluginUpgradeParams) WithXRegistryAuth(xRegistryAuth *string) *PluginUpgradeParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the plugin upgrade params
func (o *PluginUpgradeParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithBody adds the body to the plugin upgrade params
func (o *PluginUpgradeParams) WithBody(body []*PluginUpgradeParamsBodyItems0) *PluginUpgradeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the plugin upgrade params
func (o *PluginUpgradeParams) SetBody(body []*PluginUpgradeParamsBodyItems0) {
	o.Body = body
}

// WithName adds the name to the plugin upgrade params
func (o *PluginUpgradeParams) WithName(name string) *PluginUpgradeParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the plugin upgrade params
func (o *PluginUpgradeParams) SetName(name string) {
	o.Name = name
}

// WithRemote adds the remote to the plugin upgrade params
func (o *PluginUpgradeParams) WithRemote(remote string) *PluginUpgradeParams {
	o.SetRemote(remote)
	return o
}

// SetRemote adds the remote to the plugin upgrade params
func (o *PluginUpgradeParams) SetRemote(remote string) {
	o.Remote = remote
}

// WriteToRequest writes these params to a swagger request
func (o *PluginUpgradeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param remote
	qrRemote := o.Remote
	qRemote := qrRemote
	if qRemote != "" {
		if err := r.SetQueryParam("remote", qRemote); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

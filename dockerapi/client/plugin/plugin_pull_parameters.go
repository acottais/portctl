// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPluginPullParams creates a new PluginPullParams object
// with the default values initialized.
func NewPluginPullParams() *PluginPullParams {
	var ()
	return &PluginPullParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPluginPullParamsWithTimeout creates a new PluginPullParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPluginPullParamsWithTimeout(timeout time.Duration) *PluginPullParams {
	var ()
	return &PluginPullParams{

		timeout: timeout,
	}
}

// NewPluginPullParamsWithContext creates a new PluginPullParams object
// with the default values initialized, and the ability to set a context for a request
func NewPluginPullParamsWithContext(ctx context.Context) *PluginPullParams {
	var ()
	return &PluginPullParams{

		Context: ctx,
	}
}

// NewPluginPullParamsWithHTTPClient creates a new PluginPullParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPluginPullParamsWithHTTPClient(client *http.Client) *PluginPullParams {
	var ()
	return &PluginPullParams{
		HTTPClient: client,
	}
}

/*PluginPullParams contains all the parameters to send to the API endpoint
for the plugin pull operation typically these are written to a http.Request
*/
type PluginPullParams struct {

	/*XRegistryAuth
	  A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication)

	*/
	XRegistryAuth *string
	/*Body*/
	Body []*PluginPullParamsBodyItems0
	/*Name
	  Local name for the pulled plugin.

	The `:latest` tag is optional, and is used as the default if omitted.


	*/
	Name *string
	/*Remote
	  Remote reference for plugin to install.

	The `:latest` tag is optional, and is used as the default if omitted.


	*/
	Remote string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the plugin pull params
func (o *PluginPullParams) WithTimeout(timeout time.Duration) *PluginPullParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the plugin pull params
func (o *PluginPullParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the plugin pull params
func (o *PluginPullParams) WithContext(ctx context.Context) *PluginPullParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the plugin pull params
func (o *PluginPullParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the plugin pull params
func (o *PluginPullParams) WithHTTPClient(client *http.Client) *PluginPullParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the plugin pull params
func (o *PluginPullParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the plugin pull params
func (o *PluginPullParams) WithXRegistryAuth(xRegistryAuth *string) *PluginPullParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the plugin pull params
func (o *PluginPullParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithBody adds the body to the plugin pull params
func (o *PluginPullParams) WithBody(body []*PluginPullParamsBodyItems0) *PluginPullParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the plugin pull params
func (o *PluginPullParams) SetBody(body []*PluginPullParamsBodyItems0) {
	o.Body = body
}

// WithName adds the name to the plugin pull params
func (o *PluginPullParams) WithName(name *string) *PluginPullParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the plugin pull params
func (o *PluginPullParams) SetName(name *string) {
	o.Name = name
}

// WithRemote adds the remote to the plugin pull params
func (o *PluginPullParams) WithRemote(remote string) *PluginPullParams {
	o.SetRemote(remote)
	return o
}

// SetRemote adds the remote to the plugin pull params
func (o *PluginPullParams) SetRemote(remote string) {
	o.Remote = remote
}

// WriteToRequest writes these params to a swagger request
func (o *PluginPullParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}

	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	// query param remote
	qrRemote := o.Remote
	qRemote := qrRemote
	if qRemote != "" {
		if err := r.SetQueryParam("remote", qRemote); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

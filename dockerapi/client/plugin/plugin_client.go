// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPluginPrivileges gets plugin privileges
*/
func (a *Client) GetPluginPrivileges(params *GetPluginPrivilegesParams) (*GetPluginPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginPrivilegesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPluginPrivileges",
		Method:             "GET",
		PathPattern:        "/plugins/privileges",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginPrivilegesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginPrivilegesOK), nil

}

/*
PluginCreate creates a plugin
*/
func (a *Client) PluginCreate(params *PluginCreateParams) (*PluginCreateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginCreate",
		Method:             "POST",
		PathPattern:        "/plugins/create",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginCreateNoContent), nil

}

/*
PluginDelete removes a plugin
*/
func (a *Client) PluginDelete(params *PluginDeleteParams) (*PluginDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginDelete",
		Method:             "DELETE",
		PathPattern:        "/plugins/{name}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginDeleteOK), nil

}

/*
PluginDisable disables a plugin
*/
func (a *Client) PluginDisable(params *PluginDisableParams) (*PluginDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginDisable",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/disable",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginDisableOK), nil

}

/*
PluginEnable enables a plugin
*/
func (a *Client) PluginEnable(params *PluginEnableParams) (*PluginEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginEnable",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/enable",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginEnableOK), nil

}

/*
PluginInspect inspects a plugin
*/
func (a *Client) PluginInspect(params *PluginInspectParams) (*PluginInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginInspect",
		Method:             "GET",
		PathPattern:        "/plugins/{name}/json",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginInspectOK), nil

}

/*
PluginList lists plugins

Returns information about installed plugins.
*/
func (a *Client) PluginList(params *PluginListParams) (*PluginListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginList",
		Method:             "GET",
		PathPattern:        "/plugins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginListOK), nil

}

/*
PluginPull installs a plugin

Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).

*/
func (a *Client) PluginPull(params *PluginPullParams) (*PluginPullNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginPullParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginPull",
		Method:             "POST",
		PathPattern:        "/plugins/pull",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginPullReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginPullNoContent), nil

}

/*
PluginPush pushes a plugin

Push a plugin to the registry.

*/
func (a *Client) PluginPush(params *PluginPushParams) (*PluginPushOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginPushParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginPush",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/push",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginPushReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginPushOK), nil

}

/*
PluginSet configures a plugin
*/
func (a *Client) PluginSet(params *PluginSetParams) (*PluginSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginSet",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/set",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginSetNoContent), nil

}

/*
PluginUpgrade upgrades a plugin
*/
func (a *Client) PluginUpgrade(params *PluginUpgradeParams) (*PluginUpgradeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPluginUpgradeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PluginUpgrade",
		Method:             "POST",
		PathPattern:        "/plugins/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PluginUpgradeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PluginUpgradeNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

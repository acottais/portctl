// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
TaskInspect inspects a task
*/
func (a *Client) TaskInspect(params *TaskInspectParams) (*TaskInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TaskInspect",
		Method:             "GET",
		PathPattern:        "/tasks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskInspectOK), nil

}

/*
TaskList lists tasks
*/
func (a *Client) TaskList(params *TaskListParams) (*TaskListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TaskList",
		Method:             "GET",
		PathPattern:        "/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskListOK), nil

}

/*
TaskLogs gets task logs

Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).

**Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers.

*/
func (a *Client) TaskLogs(params *TaskLogsParams, writer io.Writer) (*TaskLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTaskLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TaskLogs",
		Method:             "GET",
		PathPattern:        "/tasks/{id}/logs",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TaskLogsReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TaskLogsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

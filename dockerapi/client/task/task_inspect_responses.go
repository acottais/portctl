// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// TaskInspectReader is a Reader for the TaskInspect structure.
type TaskInspectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TaskInspectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTaskInspectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewTaskInspectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewTaskInspectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewTaskInspectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTaskInspectOK creates a TaskInspectOK with default headers values
func NewTaskInspectOK() *TaskInspectOK {
	return &TaskInspectOK{}
}

/*TaskInspectOK handles this case with default header values.

no error
*/
type TaskInspectOK struct {
	Payload *models.Task
}

func (o *TaskInspectOK) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectOK  %+v", 200, o.Payload)
}

func (o *TaskInspectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectNotFound creates a TaskInspectNotFound with default headers values
func NewTaskInspectNotFound() *TaskInspectNotFound {
	return &TaskInspectNotFound{}
}

/*TaskInspectNotFound handles this case with default header values.

no such task
*/
type TaskInspectNotFound struct {
	Payload *models.ErrorResponse
}

func (o *TaskInspectNotFound) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectNotFound  %+v", 404, o.Payload)
}

func (o *TaskInspectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectInternalServerError creates a TaskInspectInternalServerError with default headers values
func NewTaskInspectInternalServerError() *TaskInspectInternalServerError {
	return &TaskInspectInternalServerError{}
}

/*TaskInspectInternalServerError handles this case with default header values.

server error
*/
type TaskInspectInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *TaskInspectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectInternalServerError  %+v", 500, o.Payload)
}

func (o *TaskInspectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTaskInspectServiceUnavailable creates a TaskInspectServiceUnavailable with default headers values
func NewTaskInspectServiceUnavailable() *TaskInspectServiceUnavailable {
	return &TaskInspectServiceUnavailable{}
}

/*TaskInspectServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type TaskInspectServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *TaskInspectServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tasks/{id}][%d] taskInspectServiceUnavailable  %+v", 503, o.Payload)
}

func (o *TaskInspectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

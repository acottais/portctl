// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SecretDeleteReader is a Reader for the SecretDelete structure.
type SecretDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SecretDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewSecretDeleteNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewSecretDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSecretDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewSecretDeleteServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSecretDeleteNoContent creates a SecretDeleteNoContent with default headers values
func NewSecretDeleteNoContent() *SecretDeleteNoContent {
	return &SecretDeleteNoContent{}
}

/*SecretDeleteNoContent handles this case with default header values.

no error
*/
type SecretDeleteNoContent struct {
}

func (o *SecretDeleteNoContent) Error() string {
	return fmt.Sprintf("[DELETE /secrets/{id}][%d] secretDeleteNoContent ", 204)
}

func (o *SecretDeleteNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSecretDeleteNotFound creates a SecretDeleteNotFound with default headers values
func NewSecretDeleteNotFound() *SecretDeleteNotFound {
	return &SecretDeleteNotFound{}
}

/*SecretDeleteNotFound handles this case with default header values.

secret not found
*/
type SecretDeleteNotFound struct {
	Payload *models.ErrorResponse
}

func (o *SecretDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /secrets/{id}][%d] secretDeleteNotFound  %+v", 404, o.Payload)
}

func (o *SecretDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDeleteInternalServerError creates a SecretDeleteInternalServerError with default headers values
func NewSecretDeleteInternalServerError() *SecretDeleteInternalServerError {
	return &SecretDeleteInternalServerError{}
}

/*SecretDeleteInternalServerError handles this case with default header values.

server error
*/
type SecretDeleteInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SecretDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /secrets/{id}][%d] secretDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *SecretDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSecretDeleteServiceUnavailable creates a SecretDeleteServiceUnavailable with default headers values
func NewSecretDeleteServiceUnavailable() *SecretDeleteServiceUnavailable {
	return &SecretDeleteServiceUnavailable{}
}

/*SecretDeleteServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type SecretDeleteServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *SecretDeleteServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /secrets/{id}][%d] secretDeleteServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SecretDeleteServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

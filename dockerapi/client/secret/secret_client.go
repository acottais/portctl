// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new secret API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secret API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SecretCreate creates a secret
*/
func (a *Client) SecretCreate(params *SecretCreateParams) (*SecretCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecretCreate",
		Method:             "POST",
		PathPattern:        "/secrets/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretCreateCreated), nil

}

/*
SecretDelete deletes a secret
*/
func (a *Client) SecretDelete(params *SecretDeleteParams) (*SecretDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecretDelete",
		Method:             "DELETE",
		PathPattern:        "/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretDeleteNoContent), nil

}

/*
SecretInspect inspects a secret
*/
func (a *Client) SecretInspect(params *SecretInspectParams) (*SecretInspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecretInspect",
		Method:             "GET",
		PathPattern:        "/secrets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretInspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretInspectOK), nil

}

/*
SecretList lists secrets
*/
func (a *Client) SecretList(params *SecretListParams) (*SecretListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecretList",
		Method:             "GET",
		PathPattern:        "/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretListOK), nil

}

/*
SecretUpdate updates a secret
*/
func (a *Client) SecretUpdate(params *SecretUpdateParams) (*SecretUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SecretUpdate",
		Method:             "POST",
		PathPattern:        "/secrets/{id}/update",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SecretUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

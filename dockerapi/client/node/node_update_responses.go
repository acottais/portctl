// Code generated by go-swagger; DO NOT EDIT.

package node

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// NodeUpdateReader is a Reader for the NodeUpdate structure.
type NodeUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NodeUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewNodeUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewNodeUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewNodeUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewNodeUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewNodeUpdateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewNodeUpdateOK creates a NodeUpdateOK with default headers values
func NewNodeUpdateOK() *NodeUpdateOK {
	return &NodeUpdateOK{}
}

/*NodeUpdateOK handles this case with default header values.

no error
*/
type NodeUpdateOK struct {
}

func (o *NodeUpdateOK) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateOK ", 200)
}

func (o *NodeUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNodeUpdateBadRequest creates a NodeUpdateBadRequest with default headers values
func NewNodeUpdateBadRequest() *NodeUpdateBadRequest {
	return &NodeUpdateBadRequest{}
}

/*NodeUpdateBadRequest handles this case with default header values.

bad parameter
*/
type NodeUpdateBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *NodeUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateNotFound creates a NodeUpdateNotFound with default headers values
func NewNodeUpdateNotFound() *NodeUpdateNotFound {
	return &NodeUpdateNotFound{}
}

/*NodeUpdateNotFound handles this case with default header values.

no such node
*/
type NodeUpdateNotFound struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateNotFound  %+v", 404, o.Payload)
}

func (o *NodeUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateInternalServerError creates a NodeUpdateInternalServerError with default headers values
func NewNodeUpdateInternalServerError() *NodeUpdateInternalServerError {
	return &NodeUpdateInternalServerError{}
}

/*NodeUpdateInternalServerError handles this case with default header values.

server error
*/
type NodeUpdateInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *NodeUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNodeUpdateServiceUnavailable creates a NodeUpdateServiceUnavailable with default headers values
func NewNodeUpdateServiceUnavailable() *NodeUpdateServiceUnavailable {
	return &NodeUpdateServiceUnavailable{}
}

/*NodeUpdateServiceUnavailable handles this case with default header values.

node is not part of a swarm
*/
type NodeUpdateServiceUnavailable struct {
	Payload *models.ErrorResponse
}

func (o *NodeUpdateServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /nodes/{id}/update][%d] nodeUpdateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *NodeUpdateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package session_experimental

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/acottais/portctl/dockerapi/models"
)

// SessionReader is a Reader for the Session structure.
type SessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 101:
		result := NewSessionSwitchingProtocols()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 400:
		result := NewSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSessionSwitchingProtocols creates a SessionSwitchingProtocols with default headers values
func NewSessionSwitchingProtocols() *SessionSwitchingProtocols {
	return &SessionSwitchingProtocols{}
}

/*SessionSwitchingProtocols handles this case with default header values.

no error, hijacking successful
*/
type SessionSwitchingProtocols struct {
}

func (o *SessionSwitchingProtocols) Error() string {
	return fmt.Sprintf("[POST /session][%d] sessionSwitchingProtocols ", 101)
}

func (o *SessionSwitchingProtocols) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSessionBadRequest creates a SessionBadRequest with default headers values
func NewSessionBadRequest() *SessionBadRequest {
	return &SessionBadRequest{}
}

/*SessionBadRequest handles this case with default header values.

bad parameter
*/
type SessionBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *SessionBadRequest) Error() string {
	return fmt.Sprintf("[POST /session][%d] sessionBadRequest  %+v", 400, o.Payload)
}

func (o *SessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionInternalServerError creates a SessionInternalServerError with default headers values
func NewSessionInternalServerError() *SessionInternalServerError {
	return &SessionInternalServerError{}
}

/*SessionInternalServerError handles this case with default header values.

server error
*/
type SessionInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SessionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /session][%d] sessionInternalServerError  %+v", 500, o.Payload)
}

func (o *SessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

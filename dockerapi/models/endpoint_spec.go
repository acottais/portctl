// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointSpec Properties that can be configured to access and load balance a service.
// swagger:model EndpointSpec
type EndpointSpec struct {

	// The mode of resolution to use for internal load balancing between tasks.
	// Enum: [vip dnsrr]
	Mode *string `json:"Mode,omitempty"`

	// List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used.
	Ports []*EndpointPortConfig `json:"Ports"`
}

// Validate validates this endpoint spec
func (m *EndpointSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var endpointSpecTypeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["vip","dnsrr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointSpecTypeModePropEnum = append(endpointSpecTypeModePropEnum, v)
	}
}

const (

	// EndpointSpecModeVip captures enum value "vip"
	EndpointSpecModeVip string = "vip"

	// EndpointSpecModeDNSRR captures enum value "dnsrr"
	EndpointSpecModeDNSRR string = "dnsrr"
)

// prop value enum
func (m *EndpointSpec) validateModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, endpointSpecTypeModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EndpointSpec) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	// value enum
	if err := m.validateModeEnum("Mode", "body", *m.Mode); err != nil {
		return err
	}

	return nil
}

func (m *EndpointSpec) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointSpec) UnmarshalBinary(b []byte) error {
	var res EndpointSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

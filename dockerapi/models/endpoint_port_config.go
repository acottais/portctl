// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EndpointPortConfig endpoint port config
// swagger:model EndpointPortConfig
type EndpointPortConfig struct {

	// name
	Name string `json:"Name,omitempty"`

	// protocol
	// Enum: [tcp udp sctp]
	Protocol string `json:"Protocol,omitempty"`

	// The mode in which port is published.
	//
	// <p><br /></p>
	//
	// - "ingress" makes the target port accessible on on every node,
	//   regardless of whether there is a task for the service running on
	//   that node or not.
	// - "host" bypasses the routing mesh and publish the port directly on
	//   the swarm node where that service is running.
	//
	// Enum: [ingress host]
	PublishMode *string `json:"PublishMode,omitempty"`

	// The port on the swarm hosts.
	PublishedPort int64 `json:"PublishedPort,omitempty"`

	// The port inside the container.
	TargetPort int64 `json:"TargetPort,omitempty"`
}

// Validate validates this endpoint port config
func (m *EndpointPortConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var endpointPortConfigTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp","sctp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointPortConfigTypeProtocolPropEnum = append(endpointPortConfigTypeProtocolPropEnum, v)
	}
}

const (

	// EndpointPortConfigProtocolTCP captures enum value "tcp"
	EndpointPortConfigProtocolTCP string = "tcp"

	// EndpointPortConfigProtocolUDP captures enum value "udp"
	EndpointPortConfigProtocolUDP string = "udp"

	// EndpointPortConfigProtocolSctp captures enum value "sctp"
	EndpointPortConfigProtocolSctp string = "sctp"
)

// prop value enum
func (m *EndpointPortConfig) validateProtocolEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, endpointPortConfigTypeProtocolPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EndpointPortConfig) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("Protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

var endpointPortConfigTypePublishModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingress","host"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		endpointPortConfigTypePublishModePropEnum = append(endpointPortConfigTypePublishModePropEnum, v)
	}
}

const (

	// EndpointPortConfigPublishModeIngress captures enum value "ingress"
	EndpointPortConfigPublishModeIngress string = "ingress"

	// EndpointPortConfigPublishModeHost captures enum value "host"
	EndpointPortConfigPublishModeHost string = "host"
)

// prop value enum
func (m *EndpointPortConfig) validatePublishModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, endpointPortConfigTypePublishModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EndpointPortConfig) validatePublishMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishMode) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublishModeEnum("PublishMode", "body", *m.PublishMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EndpointPortConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EndpointPortConfig) UnmarshalBinary(b []byte) error {
	var res EndpointPortConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

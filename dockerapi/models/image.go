// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
// swagger:model Image
type Image struct {

	// architecture
	// Required: true
	Architecture string `json:"Architecture"`

	// author
	// Required: true
	Author string `json:"Author"`

	// comment
	// Required: true
	Comment string `json:"Comment"`

	// config
	Config *ContainerConfig `json:"Config,omitempty"`

	// container
	// Required: true
	Container string `json:"Container"`

	// container config
	ContainerConfig *ContainerConfig `json:"ContainerConfig,omitempty"`

	// created
	// Required: true
	Created string `json:"Created"`

	// docker version
	// Required: true
	DockerVersion string `json:"DockerVersion"`

	// graph driver
	// Required: true
	GraphDriver *GraphDriverData `json:"GraphDriver"`

	// Id
	// Required: true
	ID string `json:"Id"`

	// metadata
	Metadata *ImageMetadata `json:"Metadata,omitempty"`

	// os
	// Required: true
	Os string `json:"Os"`

	// os version
	OsVersion string `json:"OsVersion,omitempty"`

	// parent
	// Required: true
	Parent string `json:"Parent"`

	// repo digests
	RepoDigests []string `json:"RepoDigests"`

	// repo tags
	RepoTags []string `json:"RepoTags"`

	// root f s
	// Required: true
	RootFS *ImageRootFS `json:"RootFS"`

	// size
	// Required: true
	Size int64 `json:"Size"`

	// virtual size
	// Required: true
	VirtualSize int64 `json:"VirtualSize"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchitecture(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainerConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootFS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateArchitecture(formats strfmt.Registry) error {

	if err := validate.RequiredString("Architecture", "body", string(m.Architecture)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateAuthor(formats strfmt.Registry) error {

	if err := validate.RequiredString("Author", "body", string(m.Author)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateComment(formats strfmt.Registry) error {

	if err := validate.RequiredString("Comment", "body", string(m.Comment)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateContainer(formats strfmt.Registry) error {

	if err := validate.RequiredString("Container", "body", string(m.Container)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateContainerConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainerConfig) { // not required
		return nil
	}

	if m.ContainerConfig != nil {
		if err := m.ContainerConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContainerConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateCreated(formats strfmt.Registry) error {

	if err := validate.RequiredString("Created", "body", string(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateDockerVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("DockerVersion", "body", string(m.DockerVersion)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateGraphDriver(formats strfmt.Registry) error {

	if err := validate.Required("GraphDriver", "body", m.GraphDriver); err != nil {
		return err
	}

	if m.GraphDriver != nil {
		if err := m.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("Id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateOs(formats strfmt.Registry) error {

	if err := validate.RequiredString("Os", "body", string(m.Os)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateParent(formats strfmt.Registry) error {

	if err := validate.RequiredString("Parent", "body", string(m.Parent)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateRootFS(formats strfmt.Registry) error {

	if err := validate.Required("RootFS", "body", m.RootFS); err != nil {
		return err
	}

	if m.RootFS != nil {
		if err := m.RootFS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RootFS")
			}
			return err
		}
	}

	return nil
}

func (m *Image) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("Size", "body", int64(m.Size)); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateVirtualSize(formats strfmt.Registry) error {

	if err := validate.Required("VirtualSize", "body", int64(m.VirtualSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageMetadata image metadata
// swagger:model ImageMetadata
type ImageMetadata struct {

	// last tag time
	LastTagTime string `json:"LastTagTime,omitempty"`
}

// Validate validates this image metadata
func (m *ImageMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageMetadata) UnmarshalBinary(b []byte) error {
	var res ImageMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageRootFS image root f s
// swagger:model ImageRootFS
type ImageRootFS struct {

	// base layer
	BaseLayer string `json:"BaseLayer,omitempty"`

	// layers
	Layers []string `json:"Layers"`

	// type
	// Required: true
	Type string `json:"Type"`
}

// Validate validates this image root f s
func (m *ImageRootFS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageRootFS) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("RootFS"+"."+"Type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageRootFS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageRootFS) UnmarshalBinary(b []byte) error {
	var res ImageRootFS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

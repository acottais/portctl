// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceSpec User modifiable configuration for a service.
// swagger:model ServiceSpec
type ServiceSpec struct {

	// endpoint spec
	EndpointSpec *EndpointSpec `json:"EndpointSpec,omitempty"`

	// User-defined key/value metadata.
	Labels map[string]string `json:"Labels,omitempty"`

	// mode
	Mode *ServiceSpecMode `json:"Mode,omitempty"`

	// Name of the service.
	Name string `json:"Name,omitempty"`

	// Array of network names or IDs to attach the service to.
	Networks []*ServiceSpecNetworksItems0 `json:"Networks"`

	// rollback config
	RollbackConfig *ServiceSpecRollbackConfig `json:"RollbackConfig,omitempty"`

	// task template
	TaskTemplate *TaskSpec `json:"TaskTemplate,omitempty"`

	// update config
	UpdateConfig *ServiceSpecUpdateConfig `json:"UpdateConfig,omitempty"`
}

// Validate validates this service spec
func (m *ServiceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpointSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRollbackConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceSpec) validateEndpointSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.EndpointSpec) { // not required
		return nil
	}

	if m.EndpointSpec != nil {
		if err := m.EndpointSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EndpointSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceSpec) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mode")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceSpec) validateNetworks(formats strfmt.Registry) error {

	if swag.IsZero(m.Networks) { // not required
		return nil
	}

	for i := 0; i < len(m.Networks); i++ {
		if swag.IsZero(m.Networks[i]) { // not required
			continue
		}

		if m.Networks[i] != nil {
			if err := m.Networks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Networks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceSpec) validateRollbackConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.RollbackConfig) { // not required
		return nil
	}

	if m.RollbackConfig != nil {
		if err := m.RollbackConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RollbackConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceSpec) validateTaskTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskTemplate) { // not required
		return nil
	}

	if m.TaskTemplate != nil {
		if err := m.TaskTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaskTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceSpec) validateUpdateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateConfig) { // not required
		return nil
	}

	if m.UpdateConfig != nil {
		if err := m.UpdateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UpdateConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpec) UnmarshalBinary(b []byte) error {
	var res ServiceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceSpecMode Scheduling mode for the service.
// swagger:model ServiceSpecMode
type ServiceSpecMode struct {

	// global
	Global interface{} `json:"Global,omitempty"`

	// replicated
	Replicated *ServiceSpecModeReplicated `json:"Replicated,omitempty"`
}

// Validate validates this service spec mode
func (m *ServiceSpecMode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceSpecMode) validateReplicated(formats strfmt.Registry) error {

	if swag.IsZero(m.Replicated) { // not required
		return nil
	}

	if m.Replicated != nil {
		if err := m.Replicated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Mode" + "." + "Replicated")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecMode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecMode) UnmarshalBinary(b []byte) error {
	var res ServiceSpecMode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceSpecModeReplicated service spec mode replicated
// swagger:model ServiceSpecModeReplicated
type ServiceSpecModeReplicated struct {

	// replicas
	Replicas int64 `json:"Replicas,omitempty"`
}

// Validate validates this service spec mode replicated
func (m *ServiceSpecModeReplicated) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecModeReplicated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecModeReplicated) UnmarshalBinary(b []byte) error {
	var res ServiceSpecModeReplicated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceSpecNetworksItems0 service spec networks items0
// swagger:model ServiceSpecNetworksItems0
type ServiceSpecNetworksItems0 struct {

	// aliases
	Aliases []string `json:"Aliases"`

	// target
	Target string `json:"Target,omitempty"`
}

// Validate validates this service spec networks items0
func (m *ServiceSpecNetworksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecNetworksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecNetworksItems0) UnmarshalBinary(b []byte) error {
	var res ServiceSpecNetworksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceSpecRollbackConfig Specification for the rollback strategy of the service.
// swagger:model ServiceSpecRollbackConfig
type ServiceSpecRollbackConfig struct {

	// Amount of time between rollback iterations, in nanoseconds.
	Delay int64 `json:"Delay,omitempty"`

	// Action to take if an rolled back task fails to run, or stops running during the rollback.
	// Enum: [continue pause]
	FailureAction string `json:"FailureAction,omitempty"`

	// The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
	MaxFailureRatio float64 `json:"MaxFailureRatio,omitempty"`

	// Amount of time to monitor each rolled back task for failures, in nanoseconds.
	Monitor int64 `json:"Monitor,omitempty"`

	// The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
	// Enum: [stop-first start-first]
	Order string `json:"Order,omitempty"`

	// Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
	Parallelism int64 `json:"Parallelism,omitempty"`
}

// Validate validates this service spec rollback config
func (m *ServiceSpecRollbackConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceSpecRollbackConfigTypeFailureActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["continue","pause"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecRollbackConfigTypeFailureActionPropEnum = append(serviceSpecRollbackConfigTypeFailureActionPropEnum, v)
	}
}

const (

	// ServiceSpecRollbackConfigFailureActionContinue captures enum value "continue"
	ServiceSpecRollbackConfigFailureActionContinue string = "continue"

	// ServiceSpecRollbackConfigFailureActionPause captures enum value "pause"
	ServiceSpecRollbackConfigFailureActionPause string = "pause"
)

// prop value enum
func (m *ServiceSpecRollbackConfig) validateFailureActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecRollbackConfigTypeFailureActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecRollbackConfig) validateFailureAction(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureActionEnum("RollbackConfig"+"."+"FailureAction", "body", m.FailureAction); err != nil {
		return err
	}

	return nil
}

var serviceSpecRollbackConfigTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecRollbackConfigTypeOrderPropEnum = append(serviceSpecRollbackConfigTypeOrderPropEnum, v)
	}
}

const (

	// ServiceSpecRollbackConfigOrderStopFirst captures enum value "stop-first"
	ServiceSpecRollbackConfigOrderStopFirst string = "stop-first"

	// ServiceSpecRollbackConfigOrderStartFirst captures enum value "start-first"
	ServiceSpecRollbackConfigOrderStartFirst string = "start-first"
)

// prop value enum
func (m *ServiceSpecRollbackConfig) validateOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecRollbackConfigTypeOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecRollbackConfig) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("RollbackConfig"+"."+"Order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecRollbackConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecRollbackConfig) UnmarshalBinary(b []byte) error {
	var res ServiceSpecRollbackConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceSpecUpdateConfig Specification for the update strategy of the service.
// swagger:model ServiceSpecUpdateConfig
type ServiceSpecUpdateConfig struct {

	// Amount of time between updates, in nanoseconds.
	Delay int64 `json:"Delay,omitempty"`

	// Action to take if an updated task fails to run, or stops running during the update.
	// Enum: [continue pause rollback]
	FailureAction string `json:"FailureAction,omitempty"`

	// The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.
	MaxFailureRatio float64 `json:"MaxFailureRatio,omitempty"`

	// Amount of time to monitor each updated task for failures, in nanoseconds.
	Monitor int64 `json:"Monitor,omitempty"`

	// The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.
	// Enum: [stop-first start-first]
	Order string `json:"Order,omitempty"`

	// Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
	Parallelism int64 `json:"Parallelism,omitempty"`
}

// Validate validates this service spec update config
func (m *ServiceSpecUpdateConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceSpecUpdateConfigTypeFailureActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["continue","pause","rollback"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecUpdateConfigTypeFailureActionPropEnum = append(serviceSpecUpdateConfigTypeFailureActionPropEnum, v)
	}
}

const (

	// ServiceSpecUpdateConfigFailureActionContinue captures enum value "continue"
	ServiceSpecUpdateConfigFailureActionContinue string = "continue"

	// ServiceSpecUpdateConfigFailureActionPause captures enum value "pause"
	ServiceSpecUpdateConfigFailureActionPause string = "pause"

	// ServiceSpecUpdateConfigFailureActionRollback captures enum value "rollback"
	ServiceSpecUpdateConfigFailureActionRollback string = "rollback"
)

// prop value enum
func (m *ServiceSpecUpdateConfig) validateFailureActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecUpdateConfigTypeFailureActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecUpdateConfig) validateFailureAction(formats strfmt.Registry) error {

	if swag.IsZero(m.FailureAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateFailureActionEnum("UpdateConfig"+"."+"FailureAction", "body", m.FailureAction); err != nil {
		return err
	}

	return nil
}

var serviceSpecUpdateConfigTypeOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stop-first","start-first"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceSpecUpdateConfigTypeOrderPropEnum = append(serviceSpecUpdateConfigTypeOrderPropEnum, v)
	}
}

const (

	// ServiceSpecUpdateConfigOrderStopFirst captures enum value "stop-first"
	ServiceSpecUpdateConfigOrderStopFirst string = "stop-first"

	// ServiceSpecUpdateConfigOrderStartFirst captures enum value "start-first"
	ServiceSpecUpdateConfigOrderStartFirst string = "start-first"
)

// prop value enum
func (m *ServiceSpecUpdateConfig) validateOrderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceSpecUpdateConfigTypeOrderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceSpecUpdateConfig) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderEnum("UpdateConfig"+"."+"Order", "body", m.Order); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecUpdateConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecUpdateConfig) UnmarshalBinary(b []byte) error {
	var res ServiceSpecUpdateConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

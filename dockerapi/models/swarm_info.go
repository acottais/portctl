// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SwarmInfo Represents generic information about swarm.
//
// swagger:model SwarmInfo
type SwarmInfo struct {

	// cluster
	Cluster *ClusterInfo `json:"Cluster,omitempty"`

	// control available
	ControlAvailable *bool `json:"ControlAvailable,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// local node state
	LocalNodeState LocalNodeState `json:"LocalNodeState,omitempty"`

	// Total number of managers in the swarm.
	Managers *int64 `json:"Managers,omitempty"`

	// IP address at which this node can be reached by other nodes in the
	// swarm.
	//
	NodeAddr string `json:"NodeAddr,omitempty"`

	// Unique identifier of for this node in the swarm.
	NodeID string `json:"NodeID,omitempty"`

	// Total number of nodes in the swarm.
	Nodes *int64 `json:"Nodes,omitempty"`

	// List of ID's and addresses of other managers in the swarm.
	//
	RemoteManagers []*PeerNode `json:"RemoteManagers"`
}

// Validate validates this swarm info
func (m *SwarmInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalNodeState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteManagers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwarmInfo) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SwarmInfo) validateLocalNodeState(formats strfmt.Registry) error {

	if swag.IsZero(m.LocalNodeState) { // not required
		return nil
	}

	if err := m.LocalNodeState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LocalNodeState")
		}
		return err
	}

	return nil
}

func (m *SwarmInfo) validateRemoteManagers(formats strfmt.Registry) error {

	if swag.IsZero(m.RemoteManagers) { // not required
		return nil
	}

	for i := 0; i < len(m.RemoteManagers); i++ {
		if swag.IsZero(m.RemoteManagers[i]) { // not required
			continue
		}

		if m.RemoteManagers[i] != nil {
			if err := m.RemoteManagers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RemoteManagers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwarmInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwarmInfo) UnmarshalBinary(b []byte) error {
	var res SwarmInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeDescription NodeDescription encapsulates the properties of the Node as reported by the
// agent.
//
// swagger:model NodeDescription
type NodeDescription struct {

	// engine
	Engine *EngineDescription `json:"Engine,omitempty"`

	// hostname
	Hostname string `json:"Hostname,omitempty"`

	// platform
	Platform *Platform `json:"Platform,omitempty"`

	// resources
	Resources *ResourceObject `json:"Resources,omitempty"`

	// TLS info
	TLSInfo *TLSInfo `json:"TLSInfo,omitempty"`
}

// Validate validates this node description
func (m *NodeDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEngine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeDescription) validateEngine(formats strfmt.Registry) error {

	if swag.IsZero(m.Engine) { // not required
		return nil
	}

	if m.Engine != nil {
		if err := m.Engine.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Engine")
			}
			return err
		}
	}

	return nil
}

func (m *NodeDescription) validatePlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.Platform) { // not required
		return nil
	}

	if m.Platform != nil {
		if err := m.Platform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Platform")
			}
			return err
		}
	}

	return nil
}

func (m *NodeDescription) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resources")
			}
			return err
		}
	}

	return nil
}

func (m *NodeDescription) validateTLSInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.TLSInfo) { // not required
		return nil
	}

	if m.TLSInfo != nil {
		if err := m.TLSInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TLSInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeDescription) UnmarshalBinary(b []byte) error {
	var res NodeDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

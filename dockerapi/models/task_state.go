// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TaskState task state
// swagger:model TaskState
type TaskState string

const (

	// TaskStateNew captures enum value "new"
	TaskStateNew TaskState = "new"

	// TaskStateAllocated captures enum value "allocated"
	TaskStateAllocated TaskState = "allocated"

	// TaskStatePending captures enum value "pending"
	TaskStatePending TaskState = "pending"

	// TaskStateAssigned captures enum value "assigned"
	TaskStateAssigned TaskState = "assigned"

	// TaskStateAccepted captures enum value "accepted"
	TaskStateAccepted TaskState = "accepted"

	// TaskStatePreparing captures enum value "preparing"
	TaskStatePreparing TaskState = "preparing"

	// TaskStateReady captures enum value "ready"
	TaskStateReady TaskState = "ready"

	// TaskStateStarting captures enum value "starting"
	TaskStateStarting TaskState = "starting"

	// TaskStateRunning captures enum value "running"
	TaskStateRunning TaskState = "running"

	// TaskStateComplete captures enum value "complete"
	TaskStateComplete TaskState = "complete"

	// TaskStateShutdown captures enum value "shutdown"
	TaskStateShutdown TaskState = "shutdown"

	// TaskStateFailed captures enum value "failed"
	TaskStateFailed TaskState = "failed"

	// TaskStateRejected captures enum value "rejected"
	TaskStateRejected TaskState = "rejected"

	// TaskStateRemove captures enum value "remove"
	TaskStateRemove TaskState = "remove"

	// TaskStateOrphaned captures enum value "orphaned"
	TaskStateOrphaned TaskState = "orphaned"
)

// for schema
var taskStateEnum []interface{}

func init() {
	var res []TaskState
	if err := json.Unmarshal([]byte(`["new","allocated","pending","assigned","accepted","preparing","ready","starting","running","complete","shutdown","failed","rejected","remove","orphaned"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskStateEnum = append(taskStateEnum, v)
	}
}

func (m TaskState) validateTaskStateEnum(path, location string, value TaskState) error {
	if err := validate.Enum(path, location, value, taskStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this task state
func (m TaskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
